<rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:media="http://search.yahoo.com/mrss/" version="2.0"><channel><title>Security - Whiteout Networks</title><description>Our company was founded in 2013 in Munich. Our mission is to provide secure email that is easy to use and runs on all devices.</description><link>http://blog.whiteout.io/</link><generator>Ghost 0.7</generator><lastBuildDate>Mon, 04 Jan 2016 04:52:46 GMT</lastBuildDate><atom:link href="http://blog.whiteout.io/tag/security/rss/" rel="self" type="application/rss+xml"/><ttl>60</ttl><item><title>Standardizing Secure PGP Private Key Sync</title><description>&lt;p&gt;We've recently updated our specification for private key sync after some discussions with other PGP vendors. The goal of this spec is to formalize and hopefully standardize a very simple protocol that allows interoperability between mail user agents.&lt;/p&gt;

&lt;p&gt;To recap: Our current spec proposes encryption of the user's private key&lt;/p&gt;</description><link>http://blog.whiteout.io/2015/07/06/standardizing-secure-pgp-private-key-sync/</link><guid isPermaLink="false">4e4a76f7-5a44-40ba-ae76-590c6116ed96</guid><category>Security</category><dc:creator>Tankred Hase</dc:creator><pubDate>Mon, 06 Jul 2015 16:28:06 GMT</pubDate><content:encoded>&lt;p&gt;We've recently updated our specification for private key sync after some discussions with other PGP vendors. The goal of this spec is to formalize and hopefully standardize a very simple protocol that allows interoperability between mail user agents.&lt;/p&gt;

&lt;p&gt;To recap: Our current spec proposes encryption of the user's private key using a standard symmetric key encrypted OpenPGP message and a high entropy passphrase that is generated for the user. This passphrase or &lt;em&gt;backup code&lt;/em&gt; is meant to be written down or stored in a user’s password manager. The encrypted PGP key is then stored on the mail server in a dedicated IMAP folder so that multiple mail user agents can access it. The goal here is to be able to read your encrypted messages on all of your devices and from all types of mail clients.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/whiteout-io/mail-html5/wiki/Secure-OpenPGP-Key-Pair-Synchronization-via-IMAP"&gt;Read the full spec here&lt;/a&gt;&lt;/p&gt;

&lt;h1 id="gettingfeedbackfromthecommunity"&gt;Getting Feedback from the Community&lt;/h1&gt;

&lt;p&gt;We presented the first version of our spec at &lt;a href="https://www.gnupg.org/blog/20150426-openpgp-summit.html"&gt;OpenPGP summit in April 2015&lt;/a&gt;. There we got invaluable feedback from Werner Koch of GPG, Koto of Google, and Thomas of Mailvelope. Their feedback helped shape the current version of the spec and simplified the work required by implementors to add support for key sync.&lt;/p&gt;

&lt;p&gt;Since then we've stayed in contact with Mailvelope and developers from 1&amp;amp;1 who have already implemented the protocol's storage format. Mailvelope is used by many webmail providers such as Deutsche Telekom, 1&amp;amp;1, Web.de and GMX.&lt;/p&gt;

&lt;p&gt;We also posted the proposal on multiple outlets including the GnuPG mailing list, the OpenPGP.js mailing list, as well as the Google End-to-End GitHub repository.&lt;/p&gt;

&lt;p&gt;First of all thank you for your feedback so far. There are some open issues regarding storage of private subkeys (which has been added to the spec) as well as syncing the user's local public key ring (which is out of scope and should be specified in a separate spec). All in all though it seems the first round of feedback is quite positive as people see the need for such a standard.&lt;/p&gt;

&lt;h1 id="nextsteps"&gt;Next Steps&lt;/h1&gt;

&lt;p&gt;Our goal is to standardize the proposal as an RFC once at least two vendors have a working implementation out in the wild. This is a similar to how web standards are developed, as crucial feedback from implementers is needed &lt;strong&gt;before&lt;/strong&gt; standardizing.&lt;/p&gt;

&lt;p&gt;We will also present the current version of our spec at the upcoming OpenPGP summit and discuss our experience implementing and using the standard in production.&lt;/p&gt;

&lt;p&gt;We hope to see support for encrypted key sync in all major implementations of OpenPGP such as GnuPG, Thunderbird+Enigmail, GPGTools for Mac, Gpg4win, Mailvelope, Mailpile, Google/Yahoo End-to-End and of course our very own Whiteout Mail.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;P.S. if I forgot anyone in the list above and you’re interested in implementing the spec, just drop me a line at &lt;a href="mailto:tankred@whiteout.io"&gt;tankred@whiteout.io&lt;/a&gt;. Thanks!&lt;/em&gt;&lt;/p&gt;</content:encoded></item><item><title>Whiteout Mail 1.0 and Security Audit by Cure53</title><description>&lt;p&gt;As we started closing in on version 1.0, there was one more item on the roadmap: A security audit by a reputable source. A trusted partner since we started Whiteout Networks, Cure53 from Berlin was the obvious choice. &lt;/p&gt;

&lt;p&gt;Cure53 has profound knowledge of web security, giving both high-level conceptual&lt;/p&gt;</description><link>http://blog.whiteout.io/2015/06/11/whiteout-mail-1-0-and-security-audit-by-cure53/</link><guid isPermaLink="false">4a03ab0f-3680-4961-8138-67babb5029f7</guid><category>Security</category><category>Product</category><dc:creator>Felix Hammerl</dc:creator><pubDate>Thu, 11 Jun 2015 15:21:38 GMT</pubDate><content:encoded>&lt;p&gt;As we started closing in on version 1.0, there was one more item on the roadmap: A security audit by a reputable source. A trusted partner since we started Whiteout Networks, Cure53 from Berlin was the obvious choice. &lt;/p&gt;

&lt;p&gt;Cure53 has profound knowledge of web security, giving both high-level conceptual advice, as well as well-crafted proof-of-concept-attacks. This has helped to uncover and fix issues that would have never surfaced otherwise.&lt;/p&gt;

&lt;p&gt;We’d like to thank them for the fruitful collaboration and their uncompromising stance on security! It was fun to track down the issues and fix them, and we’re proud to say that this ongoing process has helped Whiteout Mail become better in many ways.&lt;/p&gt;

&lt;p&gt;Usability is very dear to us, as good usability directly translates into security. During the audit, Whiteout Mail was not only subjected to attacks, but also inspected for ambiguous messaging for the less tech-savvy user of email encryption. &lt;/p&gt;

&lt;p&gt;All of the the high-severity vulnerabilities have been discussed and fixed/mitigated, as well as many of the medium to low severity vulnerabilities. We will continue working on the open issues in the coming weeks.&lt;/p&gt;

&lt;p&gt;Here is an excerpt from the report’s conclusion:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Cure53 has followed the Whiteout team over the years, providing thorough security advice and in-depth audit. Keep in mind that the first tests and discussion started in late 2013 and continued fruitfully until this day. Cure53 is therefore in a position to have watched the software grow into the current shape of the long-anticipated version 1.0. In the current state of development, Whiteout has mastered mitigation of a large range of security issues. It has matured to a level, where an attacker can only (if at all) revert to social engineering attacks in hopes of meeting his or her goals. Only minor issues remain capable of causing limited damage to the user-base and their encrypted communications.&lt;/p&gt;
  
  &lt;p&gt;Providing a secure yet usable mail encryption software is not an easy task and requires consideration of a multitude of attacks, as well as a well-balanced security defense deployed across many levels. It begins on the lower layers of mail reception, mail body parsing and key management, and then moves all the way to the high up handling of the application stack, where a safe, secure and comprehensible UI is required to ensure that the user makes the right decisions. Over the mentioned time period a close collaboration of the Whiteout team with Cure53 was marked by several code audits, concept reviews, discussions and design considerations. Eventually, the software in scope reached the necessary level of maturity, allowing for it to be labeled a 1.0 version without false pretense or an overly quick jump to the first stable major release.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Please follow this link to full the report: &lt;a href="https://cure53.de/pentest-report_whiteout.pdf"&gt;https://cure53.de/pentest-report_whiteout.pdf&lt;/a&gt;&lt;/p&gt;</content:encoded></item><item><title>Secure PGP Key Sync - A Proposal (cont’d)</title><description>&lt;p&gt;This post is a continuation of a &lt;a href="https://blog.whiteout.io/2014/07/07/secure-pgp-key-sync-a-proposal/"&gt;previous post on encrypted sync of a user’s private PGP key&lt;/a&gt;. In the previous post we discussed that in today’s multi screen world it is mandatory to be able to read and write encrypted messages on several devices at once. In&lt;/p&gt;</description><link>http://blog.whiteout.io/2015/04/08/secure-pgp-key-sync-a-proposal-contd/</link><guid isPermaLink="false">8b716b15-f708-4dc1-b6c1-2bf78fa2f7b0</guid><category>Security</category><category>Product</category><dc:creator>Tankred Hase</dc:creator><pubDate>Wed, 08 Apr 2015 12:12:25 GMT</pubDate><content:encoded>&lt;p&gt;This post is a continuation of a &lt;a href="https://blog.whiteout.io/2014/07/07/secure-pgp-key-sync-a-proposal/"&gt;previous post on encrypted sync of a user’s private PGP key&lt;/a&gt;. In the previous post we discussed that in today’s multi screen world it is mandatory to be able to read and write encrypted messages on several devices at once. In this context we proposed a specification for encrypted key synchronization. This post will once again highlight this topic by introducing a new simplified version of the specification.&lt;/p&gt;

&lt;h2 id="specificationupdateanrfc"&gt;Specification Update - an RFC&lt;/h2&gt;

&lt;p&gt;The new spec is published in our GitHub wiki and our intent is to publish this as an RFC for standardization, as other OpenPGP user agents such as Enigmail have expressed interest:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/whiteout-io/mail-html5/wiki/Secure-OpenPGP-Key-Pair-Synchronization-via-IMAP"&gt;Secure OpenPGP Key Pair Synchronization via IMAP (RFC)&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In a nutshell, the new spec is much simpler than our initial proposal. The encrypted private key is no longer stored on our server, but rather just stored in the user’s IMAP server. This not only removes the need to add a proprietary authentication mechanism, since IMAP servers already provide password (as well as 2-factor) based authentication, it also reduces the complexity of the overall protocol. This reduces the attack surface since a simpler protocol is easier to reason about, audit, and implement correctly.&lt;/p&gt;

&lt;h2 id="userexperience"&gt;User Experience&lt;/h2&gt;

&lt;p&gt;The user experience has also been simplified. The user no longer needs to be logged into another mail client to receive the recovery token required for authentication. The user simply needs to have an active IMAP session open, which is the case anyway for Whiteout Mail.&lt;/p&gt;

&lt;h3 id="upload"&gt;Upload&lt;/h3&gt;

&lt;p&gt;Key sync is now mandatory and the first time a user sets up Whiteout Mail they are prompted to write down a backup code.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://blog.whiteout.io/content/images/2015/04/upload-1.png" alt="Write down backup code"&gt;&lt;/p&gt;

&lt;p&gt;They are then prompted to confirm the backup code.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://blog.whiteout.io/content/images/2015/04/upload-2.png" alt="Confirm backup code"&gt;&lt;/p&gt;

&lt;p&gt;Now the user’s key pair is backed up in case they lose their device or in case they want to sync to a new device.&lt;/p&gt;

&lt;h3 id="download"&gt;Download&lt;/h3&gt;

&lt;p&gt;To add a new device, the user simply logs into Whiteout Mail with their email address. The app will automatically detect a synced key and will prompt the user to enter the backup code.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://blog.whiteout.io/content/images/2015/04/download.png" alt="Enter backup code"&gt;&lt;/p&gt;

&lt;p&gt;And done! It’s that easy.&lt;/p&gt;

&lt;h2 id="tryitnow"&gt;Try it now&lt;/h2&gt;

&lt;p&gt;To try out the new key sync, just head on over to our &lt;a href="https://whiteout.io/#product"&gt;download page&lt;/a&gt; and install the app for your platform.&lt;/p&gt;

&lt;h2 id="acknowledgements"&gt;Acknowledgements&lt;/h2&gt;

&lt;p&gt;We want to thank &lt;a href="https://cure53.de"&gt;Cure53&lt;/a&gt; who have worked together with us to design and review the security of the new protocol.&lt;/p&gt;</content:encoded></item><item><title>Secure PGP Key Sync - A Proposal</title><description>&lt;p&gt;In today's multi device world it's absolutely mandatory that the user's data be available on all screens at all times. Yet secure email protocols such as PGP were designed more than 20 years ago. This means that for encrypted email the status quo up until now has basically been: Either&lt;/p&gt;</description><link>http://blog.whiteout.io/2014/07/07/secure-pgp-key-sync-a-proposal/</link><guid isPermaLink="false">985acaa6-4710-4d5e-b9fa-e9a17db9ac5a</guid><category>Security</category><category>Privacy</category><dc:creator>Tankred Hase</dc:creator><pubDate>Mon, 07 Jul 2014 13:27:45 GMT</pubDate><content:encoded>&lt;p&gt;In today's multi device world it's absolutely mandatory that the user's data be available on all screens at all times. Yet secure email protocols such as PGP were designed more than 20 years ago. This means that for encrypted email the status quo up until now has basically been: Either you're on the device your key is on or you’re out of luck. Like this poor sap that got an encrypted email on his iPhone:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://blog.whiteout.io/content/images/2015/02/iPhone-Mail-1.PNG" alt="PGP encrypted message on iPhone"&gt;&lt;/p&gt;

&lt;p&gt;Needless to say there are many ways to go about solving this problem. One could simply throw out the last 30 years of protocols like SMTP, IMAP and PGP and reinvent the wheel like &lt;a href="http://darkmail.info/"&gt;DarkMail&lt;/a&gt;, but we at Whiteout believe in building on existing standards, since they aren't going away any time soon. This does not mean that we don't applaud the important work of creating a modern set of protocols for asynchronous messaging that solve meta-data security and forward secrecy. But given today's landscape, the large-scale adoption of such an approach is years away. In this post we'd like to discuss our approach at tackling multi device encrypted email.&lt;/p&gt;

&lt;h2 id="theburdenofkeymanagement"&gt;The burden of key management&lt;/h2&gt;

&lt;p&gt;Studies have shown time and time again that if users are exposed to the complexities of managing their own keys, many will fail.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;"Three of the twelve test participants (P4, P9, and P11) accidentally emailed the secret to the team members without encryption. Two of the three (P9 and P11) realized immediately that they had done so, but P4 appeared to believe that the security was supposed to be transparent to him and that the encryption had taken place. In all three cases the error occurred while the participants were trying to figure out the system by exploring." - &lt;em&gt;&lt;a href="http://www.gaudior.net/alma/johnny.pdf"&gt;Why Johnny Can’t Encrypt: A Usability Evaluation of PGP 5.0&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This is why we, as a service provider for encrypted email, believe that one major way we can provide value to users is key management. Not only does Whiteout Mail automate public key discovery when typing in a recipient's email address, we also want to make private key management so easy that it becomes basically invisible to users (unless users explicitly want to dig deeper, of course).&lt;/p&gt;

&lt;h2 id="whiteoutkeysyncuserexperiencetechnologypreview"&gt;Whiteout Key Sync User Experience - Technology Preview&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;DISCLAIMER: The following specification as well as the current version of the reference implementation are definitely work in progress and should not yet be considered for production use. We reserve the right to delete private keys from our sync service during the experimental phase in case we need to update our storage format or encryption protocol. We would also very much appreciate any feedback and suggestions. Feel free to &lt;a href="https://twitter.com/whiteoutio"&gt;tweet&lt;/a&gt; us or drop us &lt;a href="mailto:mail.support@whiteout.io"&gt;an email&lt;/a&gt; (&lt;a href="https://keys.whiteout.io/mail.support@whiteout.io"&gt;PGP Key&lt;/a&gt;).&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Now that we've got that out of the way, if you're feeling adventurous you can try key sync today by installing the &lt;a href="https://whiteout.io/#product"&gt;Whiteout Mail App&lt;/a&gt; and syncing your test keys between e.g. your Desktop PC and your Chromebook (Android App coming very soon). The setup process itself borrows heavily from existing products like Firefox Sync and the iCloud keychain from Apple. Both products allow users to sync their passwords and other personal data in an encrypted form.&lt;/p&gt;

&lt;p&gt;It's important to note that multi device sync for Whiteout Mail is completely optional. We understand that there are users that would never sync their private PGP key (even in encrypted form) and we absolutely respect that. But if you do want to use Whiteout Mail on multiple devices, then here's what the user experience for Whiteout Key Sync looks like:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The user starts Whiteout Mail on the Computer they first installed the app on. Either the app generated a new PGP key pair for the user on initial startup (default behavior for average users and first time PGPers) or the user chose to import an existing PGP key (option for experienced PGP users). The user must then activate &lt;code&gt;Key sync&lt;/code&gt; from the menu and is greeted with this setup screen:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src="http://blog.whiteout.io/content/images/2015/02/Keychain-code-setup.png" alt="Key sync setup"&gt;&lt;/p&gt;

&lt;p&gt;In this step a random &lt;code&gt;keychain code&lt;/code&gt; is generated for the user which is used to encrypt the user’s private key on their computer before sync. From a UX perspective the code basically replaces the private PGP key, as the user must write down the &lt;code&gt;keychain code&lt;/code&gt; and keep it in a safe place.&lt;/p&gt;

&lt;p&gt;The code is never shared or made available to Whiteout, so we cannot decrypt the user’s PGP key. The idea here is that the long asymmetric PGP key is replaced by a short (but still high-entropy) symmetric key, which can be written down easily and typed into a touch screen. (For all the technical details, please check out the protocol specification at the end of this post.)&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The user then installs the Whiteout Mail app on a new device. If sync was activated for his account the app will know this and ask the user for a recovery token which is sent to them via Email or SMS:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src="http://blog.whiteout.io/content/images/2015/02/Recovery-token-input-2.png" alt="Recovery token input on Nexus 5"&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;After the user has been authenticated, they will be asked to provide their keychain code. Upon successful entry, the encrypted private PGP key will be sent to the device, decrypted locally and stored on the device.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src="http://blog.whiteout.io/content/images/2015/02/Keychain-code-input-1.png" alt="Keychain code input on Nexus 5"&gt;&lt;/p&gt;

&lt;p&gt;And done! The user can now read and write encrypted messages on multiple devices.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://blog.whiteout.io/content/images/2015/02/Mail-list-Nexus-5-1.png" alt="Mail list on Nexus 5"&gt;&lt;/p&gt;

&lt;p&gt;It's important to note that this setup process is required only once when setting up the new device. This means that the keychain code can conveniently be kept in a safe place and does not have to be with the user at all times.&lt;/p&gt;

&lt;p&gt;Now that we've briefly touched what the user experience looks like, here's a  technical overview of the encryption protocol.&lt;/p&gt;

&lt;h2 id="whiteoutprivatekeysyncspecification"&gt;Whiteout Private Key Sync Specification&lt;/h2&gt;

&lt;p&gt;Importing/exporting the user’s private PGP key to their various devices is a challenge on non desktop systems such as iOS, as these system have no USB support. Current solutions such as iPGP can import the user’s private key through Dropbox, but this obviously compromises the private key to a cloud storage provider that the user has no control over. The goal of this specification is to create a secure and easy way to sync the user’s private key over a cloud service that the user does not have to trust completely.&lt;/p&gt;

&lt;p&gt;This specification is split up into the various protocol steps required for key sync.&lt;/p&gt;

&lt;h3 id="deviceregistration"&gt;Device Registration&lt;/h3&gt;

&lt;h4 id="scope"&gt;Scope&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;The device configuration protocol MUST NOT allow multiple devices with the same DeviceSecret.&lt;/li&gt;
&lt;li&gt;The device configuration protocol MUST NOT allow a device to impersonate another one just with the knowledge of its DeviceSecret.&lt;/li&gt;
&lt;li&gt;The device configuration protocol MUST NOT allow a new device to be configured without the possession of the user's keypair.&lt;/li&gt;
&lt;li&gt;The device configuration protocol WILL NOT protect a user from a possible rogue server authorizing devices on the user's behalf.&lt;/li&gt;
&lt;li&gt;The device configuration protocol WILL NOT protect the user from an attacker stealing the DeviceSecret from the server and impersonating the device for that DeviceSecret.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id="description"&gt;Description&lt;/h4&gt;

&lt;p&gt;Device registration will exploit the fact that both the user and the server have the user's public key, and the user has the private key. With this knowledge, the server will negotiate a set of random session keys to exchange and authenticate the data sent between the parties.&lt;/p&gt;

&lt;p&gt;A device is referenced by its DeviceSecret and memorable DeviceName. The device secret is a globally unique random string with 256 bits of entropy that is generated using a RNG on the device to avoid collisions. The registration will proceed as showed in the flow diagrams below.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://blog.whiteout.io/content/images/2015/02/diagram_1-1.png" alt="Device secret generation"&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src="http://blog.whiteout.io/content/images/2015/02/diagram_2-1.png" alt="Device Registration"&gt;&lt;/p&gt;

&lt;h3 id="authentication"&gt;Authentication&lt;/h3&gt;

&lt;h4 id="scope"&gt;Scope&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;The authentication protocol MUST protect the DeviceSecret from being reachable by a third party in transit.&lt;/li&gt;
&lt;li&gt;The authentication protocol MUST protect the session keys from being reachable by a third party in transit.&lt;/li&gt;
&lt;li&gt;The authentication protocol MUST avoid reusing session keys.&lt;/li&gt;
&lt;li&gt;The authentication protocol WILL NOT allow authentication without the user having possession of their key pair.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id="description"&gt;Description&lt;/h4&gt;

&lt;p&gt;The authentication will exploit the same fact as device registration: using the public key for the user, the server will negotiate a set of session keys to secure future communications. The fact that the user will be able to decrypt the data sent from the server proves that she is the rightful owner of the account.&lt;/p&gt;

&lt;p&gt;Authentication will have, along with the random keys, a challenge that the client needs to respond to. The test for the user is to just send the challenge string back to the server, but wrapped with a different encryption method.&lt;/p&gt;

&lt;p&gt;Once these steps are complete, both the server and the client will have negotiated keys for this session.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://blog.whiteout.io/content/images/2015/02/diagram_3-1.png" alt="Authentication"&gt;&lt;/p&gt;

&lt;h3 id="keysync"&gt;Key Sync&lt;/h3&gt;

&lt;h4 id="scope"&gt;Scope&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;The key sync protocol MUST protect the private key from any other party that's not the rightful owner of it, even the server.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id="description"&gt;Description&lt;/h4&gt;

&lt;p&gt;Key synchronization will be done by uploading the key pair encrypted to the Whiteout cloud storage. The key pair will be encrypted with a randomly generated key which will be presented to the user in the form of a QR code or a string of characters. This set of keys will not be uploaded to the cloud, so the key pair will be secure.&lt;/p&gt;

&lt;p&gt;To download the encrypted key pair, the user will request the recovery token that the server assigned to the key at the time of the request. This recovery token will be sent to the user through SMS or email (depending on what is available). With it, the client can download the key pair and use the encryption keys to decipher and import it.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://blog.whiteout.io/content/images/2015/02/diagram_4-1.png" alt="Key sync"&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src="http://blog.whiteout.io/content/images/2015/02/diagram_5-2-1.png" alt="Key sync"&gt;&lt;/p&gt;

&lt;h3 id="diagramreference"&gt;Diagram Reference&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Es(key, data)&lt;/strong&gt;: Symmetric encrypt with key. &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Ea(key, data)&lt;/strong&gt;: Asymmetric encrypt data with a public PGP key.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Ds(key, ciphertext)&lt;/strong&gt;: Symmetric decrypt ciphertext using key.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Pk&lt;/strong&gt;: User’s public PGP key.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;session_keys&lt;/strong&gt;: random encryption keys generated for a session.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id="cipherselection"&gt;Cipher selection&lt;/h3&gt;

&lt;h4 id="blockcipherandmessageauthentication"&gt;Block cipher and message authentication&lt;/h4&gt;

&lt;p&gt;The protocol uses the authenticated &lt;a href="http://en.wikipedia.org/wiki/Galois/Counter_Mode"&gt;AES-256-GCM&lt;/a&gt; mode for symmetric encryption.&lt;/p&gt;

&lt;h4 id="keyderivationforprivatekeyencryption"&gt;Key derivation for private key encryption&lt;/h4&gt;

&lt;p&gt;The private key is encrypted with a 256 bit symmetric key derived from a high entropy code (which is generated for the user) using &lt;a href="http://en.wikipedia.org/wiki/PBKDF2"&gt;PBKDF2-SHA256&lt;/a&gt; (10000 iterations, per user random salt).&lt;/p&gt;

&lt;h4 id="asymmetriccipher"&gt;Asymmetric cipher&lt;/h4&gt;

&lt;p&gt;For asymmetric encryption, &lt;a href="http://en.wikipedia.org/wiki/Pretty_Good_Privacy"&gt;PGP&lt;/a&gt; is used. Key size should be at least 2048 bits.&lt;/p&gt;</content:encoded></item><item><title>Heartbleed and JavaScript Crypto</title><description>&lt;p&gt;Reading the news on Heartbleed in the mainstream media these days got me thinking. It's hard enough to grasp the consequences as a technical person, but trying to explain to my girlfriend why she might want to change the passwords to all of her favorite sites made me think if&lt;/p&gt;</description><link>http://blog.whiteout.io/2014/04/13/heartbleed-and-javascript-crypto/</link><guid isPermaLink="false">0d49675c-4b81-494b-912d-ea2955963f95</guid><category>JavaScript</category><category>Security</category><dc:creator>Tankred Hase</dc:creator><pubDate>Sun, 13 Apr 2014 12:26:00 GMT</pubDate><content:encoded>&lt;p&gt;Reading the news on Heartbleed in the mainstream media these days got me thinking. It's hard enough to grasp the consequences as a technical person, but trying to explain to my girlfriend why she might want to change the passwords to all of her favorite sites made me think if things couldn't be different.&lt;/p&gt;

&lt;p&gt;There is no such thing as bug-free software and anyone writing a complex enough application will experience critical security bugs sooner or later. For most web applications the single line of defense to protect user's data in transit has pretty much been SSL. Much has been said about JavaScript cryptography &lt;a href="http://www.matasano.com/articles/javascript-cryptography/"&gt;here&lt;/a&gt; and &lt;a href="http://tonyarcieri.com/whats-wrong-with-webcrypto"&gt;here&lt;/a&gt;. While these were great blogposts in their time, in the wake of Heartbleed I would like to discuss how JavaScript crypto can  add a valid layer of security if it is deployed correctly.&lt;/p&gt;

&lt;h2 id="threatmodeling"&gt;Threat modeling&lt;/h2&gt;

&lt;p&gt;It's very trendy to criticize JS crypto. And while some arguments are valid, more often than not they are made in a  vacuum and without context. When discussing security mechanisms we should discuss what we're trying to protect and from whom. For web apps I see two main categories:&lt;/p&gt;

&lt;h3 id="servicesyoutrustwithyourdata"&gt;Services you trust with your data&lt;/h3&gt;

&lt;p&gt;I will use an example here. Elster is a system used by the German government which lets citizens do their taxes online. You can visit it at &lt;a href="https://www.elsteronline.de"&gt;https://www.elsteronline.de&lt;/a&gt;. What most people don't know is that Elster uses JS crypto to authenticate users with a passphrase protected Elster certificate which is decrypted in the browser. Before the crypto trolls start getting hungry, let me explain why this makes perfect sense.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;You trust Elster with your tax data and therefor it's ok to trust their web server for authentication.&lt;/strong&gt; This is not a zero knowledge type application where you're trying to protect your data from a service provider. The user does not want to protect his data from Elster. It is actually Elster that wants to verify that you are the person with the corresponding tax identifier.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;The alternative is a Java Applet.&lt;/strong&gt; Yes, this is how the authentication worked before they switched to the Java-free version. And we all know Java is not famous for it's security track record. So given the choice I'd take JS crypto over having to activate Java in my browser any day.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;What I'm trying to say with this example is that there are use cases where deploying JavaScript cryptography over a standard web server setup can make perfect sense if you trust the web server with your data. Another example like this is Netflix, which uses WebCrypto and new DRM standards to protect &lt;em&gt;their&lt;/em&gt; premium content. But basically any website that sends the user's password in plaintext to the web server could do hashing client side. This would prevent my girlfriend from having to change all of her passwords when something like Heartbleed happens, since most web servers don't use forward secrecy and the compromise of private SSL keys can be used to decrypt stored traffic after the fact.&lt;/p&gt;

&lt;h3 id="servicesyoudonttrustcompletelywithyourdata"&gt;Services you don't trust (completely) with your data&lt;/h3&gt;

&lt;p&gt;Now that we've established an example for where a normal web server deployment can make sense, lets look at an example of where it does not make sense. &lt;a href="https://whiteout.io"&gt;Whiteout Mail&lt;/a&gt; is an application designed to make PGP encryption easier for average users (I'm a co-founder and developer). When we started designing the app, we thought about deployment via standard web hosting due to ease of use, but that simply does not make sense for this type of app.&lt;/p&gt;

&lt;p&gt;Crypto.cat got a lot of heat by security experts back in the day when it was  served via a web server. You can read the two blogposts I linked at the top or just take &lt;a href="https://www.schneier.com/blog/archives/2012/08/cryptocat.html"&gt;Bruce Schneier's word for it&lt;/a&gt;. This is why crypto.cat changed to an App/Extension based deployment model. This is has several reasons.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;You don't trust the web server with your data.&lt;/strong&gt; If you did you wouldn't be using client side crypto. Every time you click on a link, you're basically "installing" the client side code on your machine to be executed in your browser. The term "drive by web" is usually used here, which basically means that browsers are designed to run arbitrary untrusted code. For zero knowledge type apps, this is not the model we're looking for.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;We want auditable static versions.&lt;/strong&gt; For privacy sensitive applications it is a best practice for software to be installed locally with a static version. This version is signed, downloaded, verified locally by runtimes and can be audited by independent security researchers.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id="bestpracticesforjscrypto"&gt;Best practices for JS crypto&lt;/h2&gt;

&lt;p&gt;It is a bit simplistic to split the world into these two categories, but for starters I hope it will help developers working with the new &lt;a href="http://www.w3.org/TR/WebCryptoAPI/"&gt;Web Crypto Apis&lt;/a&gt; to understand where to put their application. To help you get started here is a summary of learnings from our work on Whiteout Mail.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;For zero-knowledge type applications, use packaged apps.&lt;/strong&gt; They are available for &lt;a href="https://developer.mozilla.org/en-US/Marketplace/Publishing/Packaged_apps"&gt;Firefox&lt;/a&gt;, &lt;a href="https://developer.chrome.com/apps/about_apps"&gt;Chrome&lt;/a&gt;, and for mobile there's PhoneGap and Google's &lt;a href="https://github.com/MobileChromeApps/mobile-chrome-apps#run-chrome-apps-on-mobile-using-apache-cordova"&gt;Chrome mobile apps&lt;/a&gt;. Even Microsoft now supports &lt;a href="http://msdn.microsoft.com/en-us/library/windows/apps/br211361"&gt;first class HTML5 apps&lt;/a&gt; with universal apps for Windows 8.1. The advantage besides security is also that your app can be found in the platform's native app store, which is where most users look to find apps anyway.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;For web server deployments use SSL&lt;/strong&gt; with &lt;a href="http://crypto.stackexchange.com/questions/8933/how-can-i-use-ssl-tls-with-perfect-forward-secrecy"&gt;forward secrecy&lt;/a&gt; and activate &lt;a href="https://developer.mozilla.org/en-US/docs/Security/HTTP_Strict_Transport_Security"&gt;HSTS (HTTP Strict Transport Security)&lt;/a&gt; on your web server. Chrome even supports &lt;a href="http://blog.chromium.org/2011/06/new-chromium-security-features-june.html"&gt;certificate pinning&lt;/a&gt; now.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;You should use &lt;a href="http://www.html5rocks.com/en/tutorials/security/content-security-policy/"&gt;CSP (Content Security Policy)&lt;/a&gt;&lt;/strong&gt; to protect users against XSS. It's very easy to configure and there is no excuse to not use it. This also forces you to write code with a clean separation of concerns.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Parse data from a server with JSON.parse&lt;/strong&gt; (never with eval) and &lt;strong&gt;escape all strings&lt;/strong&gt; before inserting them into the DOM. If you're using a framework like Angular.js it will escape models automatically before rendering and it's even compatible with CSP!&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Always code in ES5 strict mode.&lt;/strong&gt; You can use jshint inside your favorite editor (I use sublime) and tools like grunt make it easy to integrate into your test suite.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Write unit tests rigorously.&lt;/strong&gt; I cannot overstate how important this is. You will not catch regressions otherwise.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Do code reviews&lt;/strong&gt; before merging changes to the master branch. This will not only catch some security bugs, but also increase code quality and maintainability.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Do regular security audits&lt;/strong&gt; by independent professionals. They will find stuff. Trust me.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;If you can, open source your code.&lt;/strong&gt; This isn't possible for all business models, but if you can't open source the entire client app, at least open source the crypto bits to allow inspection.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id="potentialbenefitsofjscryptoovernativecrypto"&gt;Potential benefits of JS crypto over native crypto&lt;/h2&gt;

&lt;p&gt;I know I'm stretching a bit here, but bear with me for a moment. Here are a few aspects in which I think JS crypto has an advantage over native crypto:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Installed JS crypto apps source can be viewed.&lt;/strong&gt; There is a great blogpost by Jon Callas from Silent Circle about the verifiability of native apps. You should definitely &lt;a href="https://blog.silentcircle.com/reply-to-zooko/"&gt;check it out&lt;/a&gt;. He explains why open sourcing Silent Circle would not solve the problem Ken Thomson first articulated in his &lt;em&gt;Reflections on Trusting Trust&lt;/em&gt;. For interpreted languages such as JavaScript, we don't have this problem as the app is deployed as source code. You still need to trust the browser runtime (which is of course compiled code), but it minimizes the amount of code-bases you need to trust to your OS and your Browser.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;JavaScript is memory safe.&lt;/strong&gt; It seems obvious but often overlooked. The bug that caused Heartbleed was due to a problem that C compilers leave to programmers: memory safety. Although JavaScript is slower in performance due to this property, buffer overflows like the one that caused Heartbleed are a lot less likely to happen in JavaScript.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;One codebase means less room for error.&lt;/strong&gt; I explained this in an &lt;a href="https://github.com/tanx/SafeWith.me/wiki/FAQ"&gt;FAQ for safewith.me&lt;/a&gt; (a hobby project before whiteout.io). The lines of code in any project &lt;a href="http://mayerdan.com/ruby/2012/11/11/bugs-per-line-of-code-ratio/"&gt;correlate to the number of bugs&lt;/a&gt; sleeping in a given software. If there's anything we've learned from Heartbleed, it's that no matter the choice of programming language, the biggest risk is human error. Since we're serving all platforms with a single codebase with JavaScript, were reducing the room for human error and therefor the attack surface. It also makes the code easier to understand and audit by outsiders.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;</content:encoded></item></channel></rss>