<rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:media="http://search.yahoo.com/mrss/" version="2.0"><channel><title>Whiteout Networks</title><description>Our company was founded in 2013 in Munich. Our mission is to provide secure email that is easy to use and runs on all devices.</description><link>http://blog.whiteout.io/</link><generator>Ghost 0.7</generator><lastBuildDate>Mon, 04 Jan 2016 01:08:44 GMT</lastBuildDate><atom:link href="http://blog.whiteout.io/rss/" rel="self" type="application/rss+xml"/><ttl>60</ttl><item><title>End-of-Life for Whiteout Cloud Services: Action Required!</title><description>&lt;p&gt;Dear Whiteout user,&lt;/p&gt;

&lt;p&gt;you haven't heard from us in a while. Some say that no news is good news. Not in this case. &lt;/p&gt;

&lt;p&gt;When we set out with Whiteout Networks we wanted to create a viable business model in the area of encrypted email. That has not been successful. &lt;/p&gt;

&lt;p&gt;Therefore&lt;/p&gt;</description><link>http://blog.whiteout.io/2015/11/30/end-of-life-for-whiteout-key-service-action-required/</link><guid isPermaLink="false">c0834398-78ed-4ff8-95a8-f29ad1e0bc51</guid><dc:creator>Oliver Gajek</dc:creator><pubDate>Mon, 30 Nov 2015 16:48:10 GMT</pubDate><content:encoded>&lt;p&gt;Dear Whiteout user,&lt;/p&gt;

&lt;p&gt;you haven't heard from us in a while. Some say that no news is good news. Not in this case. &lt;/p&gt;

&lt;p&gt;When we set out with Whiteout Networks we wanted to create a viable business model in the area of encrypted email. That has not been successful. &lt;/p&gt;

&lt;p&gt;Therefore we have to declare "end of life" for our cloud services. If you are one of the many production users of Whiteout Mail you have to take action!&lt;/p&gt;

&lt;h2 id="endoflifeforcloudservices"&gt;End of Life for Cloud Services&lt;/h2&gt;

&lt;p&gt;We will discontinue Whiteout Networks’ services including all cloud services such as Whiteout Webmail, Whiteout Mailbox, and the public key server as of the end of December 2015. Please migrate any data you may still have until then.&lt;/p&gt;

&lt;h2 id="exportyouremails"&gt;Export your emails&lt;/h2&gt;

&lt;p&gt;To backup your emails from wmail.io, please use a third-party IMAP client, e.g. Thunderbird or Apple Mail. To sign in with a third-party client, please use the following settings:&lt;/p&gt;

&lt;p&gt;IMAP: imap.wmail.io:993 (uses TLS) &lt;br&gt;
SMTP: smtp.wmail.io:587 (uses STARTTLS) &lt;br&gt;
Username: Your full &lt;name&gt;@wmail.io email address (&lt;strong&gt;including @wmail.io&lt;/strong&gt;) &lt;br&gt;
Password: Your wmail.io password&lt;/name&gt;&lt;/p&gt;

&lt;h2 id="exportyourencryptionkeys"&gt;Export your encryption keys&lt;/h2&gt;

&lt;p&gt;To export the encryption keys, please sign in to Whiteout Mail on your desktop, then to go “Account” &gt; “Export keypair”. Please note: Export your keys on the desktop; this will not work in the Android and iOS apps due to a browser bug!&lt;/p&gt;

&lt;h2 id="whatnext"&gt;What Next&lt;/h2&gt;

&lt;p&gt;There are many PGP products available to you and your choice may vary depending on your requirements. &lt;/p&gt;

&lt;p&gt;We take our commitment to the open source community very seriously and invite parties interested in continuing the development to get in touch.&lt;/p&gt;

&lt;p&gt;In the meantime we would certainly recommend checking out &lt;a href="https://www.mailvelope.com/"&gt;Mailvelope&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;Many thanks to all of our users for the support and feedback that you have given us. &lt;/p&gt;

&lt;p&gt;All the best, &lt;br&gt;
Team Whiteout&lt;/p&gt;</content:encoded></item><item><title>Decentralized Key Servers Are Dead</title><description>&lt;p&gt;This blog post examines options to retire the Web-of-Trust (WoT) and the SKS key pool&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Recap&lt;/strong&gt;: The WoT is a decentralized trust model that was created in an attempt at making a decentralized alternative to the centralized trust model of a PKI with it’s hierarchical CA system. If Alice&lt;/p&gt;</description><link>http://blog.whiteout.io/2015/07/10/trust-in-a-decentralized-system/</link><guid isPermaLink="false">601d8b11-966f-4d8b-8cfd-00ba52ab816e</guid><dc:creator>Felix Hammerl</dc:creator><pubDate>Fri, 10 Jul 2015 12:02:57 GMT</pubDate><content:encoded>&lt;p&gt;This blog post examines options to retire the Web-of-Trust (WoT) and the SKS key pool&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Recap&lt;/strong&gt;: The WoT is a decentralized trust model that was created in an attempt at making a decentralized alternative to the centralized trust model of a PKI with it’s hierarchical CA system. If Alice signs Bob’s key, Alice vouches for Bob being who he claims to be. If enough users sign Bob’s key, any third party can have a reasonable expectation that Bob is in fact the Bob they want to contact.&lt;/p&gt;

&lt;p&gt;At Whiteout, we conciously chose to bypass the WoT in order to &lt;a href="https://blog.whiteout.io/2015/02/06/making-pgp-key-management-invisible-so-johnny-can-encrypt/"&gt;make key management easy&lt;/a&gt;. Without looking up a key’s signatures, a user can be reasonably sure that keys from the Whiteout Key Server belong to whoever owns the email address, because we validate their contact's public key. But unfortunately, that is not true for the SKS key pool.&lt;/p&gt;

&lt;h4 id="whatswrongwiththewot"&gt;What’s Wrong With The WoT?&lt;/h4&gt;

&lt;p&gt;What exactly is the problem with the WoT and why do we need a replacement? Here are a few issues that fundamentally hinder adoption:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Key Signing Parties&lt;/strong&gt;: At a key signing party, people sign other people’s keys when they are physically present, possibly with having their ID checked and personally confirming their key’s fingerprint. Those are only for the most hardcore of users, not feasible at all for average users. If this is the smartest solution we have to establish a high degree of trust, it is time for a change.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Revocation&lt;/strong&gt;: Revoking your public key, should you have lost the private key for whatever reason, is impossible. The key will just live on and will never be renewed. In the words of Phil Zimmermann: “I’m sorry, you’re hosed”. Trust me, that stuff happens more often than you think!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Transparency&lt;/strong&gt; and &lt;strong&gt;Authenticity&lt;/strong&gt;: How do you trust a system where anyone can claim to be somebody he’s not?&lt;/p&gt;

&lt;h4 id="isthereabetterway"&gt;Is There A Better Way?&lt;/h4&gt;

&lt;p&gt;At the &lt;a href="https://www.gnupg.org/blog/20150426-openpgp-summit.html"&gt;PGP Summit earlier this year&lt;/a&gt;, we had a get-together with other (email) encryption projects. Among them were Werner Koch (GPG), GPGTools, OpenKeychain, and the Google e2e team. I moderated a session centered around alternatives for public key management, and finding requirements for the next generation of Identity Providers (IPs). We specifically discussed these requirements:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Federation&lt;/strong&gt;: Decentralization creates complexity and can be really tricky to get right. Centralization is not an alternative, for obvious reasons. But federation would be a feasible middle-ground here. This way, every provider can handle their customers’ keys for them.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Authenticated Uploads&lt;/strong&gt;: In this model, Bob has to authenticate to the Identity Provider (IP), instead of the sender. This makes it easier and creates a trust relationship between IP and user.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Key Server Integrity&lt;/strong&gt;: The key store should be write-only, with an audit trail of what has been added.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Revocation&lt;/strong&gt;: In an append-only world, you would simply take the latest key and replace the key before with it. Remember, the upload itself is authenticated and audited, so you can be fairly sure that you’re talking to the correct person!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;HKP-compatible API and/or REST API, CORS, TLS&lt;/strong&gt;: This should just be part of any modern approach.&lt;/p&gt;

&lt;h4 id="abettertomorrow"&gt;A Better Tomorrow&lt;/h4&gt;

&lt;p&gt;Google has published a lot about their ideas in their &lt;a href="https://github.com/google/end-to-end/wiki/Key-Distribution"&gt;Github Wiki&lt;/a&gt;. Their ideas are in line with the requirements presented above and well worth the read.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://keybase.io/docs/server_security"&gt;Keybase.io&lt;/a&gt; has been very vocal with their idea about how an IP should work. It is definitely worth checking out their documentation.&lt;/p&gt;

&lt;p&gt;Very little is known about &lt;a href="https://www.facebook.com/notes/protect-the-graph/securing-email-communications-from-facebook/1611941762379302"&gt;Facebook’s current efforts&lt;/a&gt;, &lt;a href="https://developers.facebook.com/docs/graph-api/reference/v2.2/user"&gt;except that FB exposes the public key through the graph API&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;All in all, we’re excited to see all of the recent efforts to improve over the status quo!&lt;/p&gt;</content:encoded></item><item><title>Standardizing Secure PGP Private Key Sync</title><description>&lt;p&gt;We've recently updated our specification for private key sync after some discussions with other PGP vendors. The goal of this spec is to formalize and hopefully standardize a very simple protocol that allows interoperability between mail user agents.&lt;/p&gt;

&lt;p&gt;To recap: Our current spec proposes encryption of the user's private key&lt;/p&gt;</description><link>http://blog.whiteout.io/2015/07/06/standardizing-secure-pgp-private-key-sync/</link><guid isPermaLink="false">4e4a76f7-5a44-40ba-ae76-590c6116ed96</guid><category>Security</category><dc:creator>Tankred Hase</dc:creator><pubDate>Mon, 06 Jul 2015 16:28:06 GMT</pubDate><content:encoded>&lt;p&gt;We've recently updated our specification for private key sync after some discussions with other PGP vendors. The goal of this spec is to formalize and hopefully standardize a very simple protocol that allows interoperability between mail user agents.&lt;/p&gt;

&lt;p&gt;To recap: Our current spec proposes encryption of the user's private key using a standard symmetric key encrypted OpenPGP message and a high entropy passphrase that is generated for the user. This passphrase or &lt;em&gt;backup code&lt;/em&gt; is meant to be written down or stored in a user’s password manager. The encrypted PGP key is then stored on the mail server in a dedicated IMAP folder so that multiple mail user agents can access it. The goal here is to be able to read your encrypted messages on all of your devices and from all types of mail clients.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/whiteout-io/mail-html5/wiki/Secure-OpenPGP-Key-Pair-Synchronization-via-IMAP"&gt;Read the full spec here&lt;/a&gt;&lt;/p&gt;

&lt;h1 id="gettingfeedbackfromthecommunity"&gt;Getting Feedback from the Community&lt;/h1&gt;

&lt;p&gt;We presented the first version of our spec at &lt;a href="https://www.gnupg.org/blog/20150426-openpgp-summit.html"&gt;OpenPGP summit in April 2015&lt;/a&gt;. There we got invaluable feedback from Werner Koch of GPG, Koto of Google, and Thomas of Mailvelope. Their feedback helped shape the current version of the spec and simplified the work required by implementors to add support for key sync.&lt;/p&gt;

&lt;p&gt;Since then we've stayed in contact with Mailvelope and developers from 1&amp;amp;1 who have already implemented the protocol's storage format. Mailvelope is used by many webmail providers such as Deutsche Telekom, 1&amp;amp;1, Web.de and GMX.&lt;/p&gt;

&lt;p&gt;We also posted the proposal on multiple outlets including the GnuPG mailing list, the OpenPGP.js mailing list, as well as the Google End-to-End GitHub repository.&lt;/p&gt;

&lt;p&gt;First of all thank you for your feedback so far. There are some open issues regarding storage of private subkeys (which has been added to the spec) as well as syncing the user's local public key ring (which is out of scope and should be specified in a separate spec). All in all though it seems the first round of feedback is quite positive as people see the need for such a standard.&lt;/p&gt;

&lt;h1 id="nextsteps"&gt;Next Steps&lt;/h1&gt;

&lt;p&gt;Our goal is to standardize the proposal as an RFC once at least two vendors have a working implementation out in the wild. This is a similar to how web standards are developed, as crucial feedback from implementers is needed &lt;strong&gt;before&lt;/strong&gt; standardizing.&lt;/p&gt;

&lt;p&gt;We will also present the current version of our spec at the upcoming OpenPGP summit and discuss our experience implementing and using the standard in production.&lt;/p&gt;

&lt;p&gt;We hope to see support for encrypted key sync in all major implementations of OpenPGP such as GnuPG, Thunderbird+Enigmail, GPGTools for Mac, Gpg4win, Mailvelope, Mailpile, Google/Yahoo End-to-End and of course our very own Whiteout Mail.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;P.S. if I forgot anyone in the list above and you’re interested in implementing the spec, just drop me a line at &lt;a href="mailto:tankred@whiteout.io"&gt;tankred@whiteout.io&lt;/a&gt;. Thanks!&lt;/em&gt;&lt;/p&gt;</content:encoded></item><item><title>Whiteout Mailbox Personal Edition: Now Available For Free!</title><description>&lt;p&gt;In the last six weeks we have had a lot of discussion with our user community around product packaging and pricing, primarily within the context of our crowdfunding campaign, where we tried to pre-sell the upcoming Personal and Pro editions of Whiteout Mailbox. &lt;/p&gt;

&lt;p&gt;The overwhelming feedback that we received during&lt;/p&gt;</description><link>http://blog.whiteout.io/2015/06/29/whiteout-mailbox-personal-edition-now-available-for-free/</link><guid isPermaLink="false">d079120f-c21c-423c-ae0c-b0f1651bd3a8</guid><category>Product</category><dc:creator>Oliver Gajek</dc:creator><pubDate>Mon, 29 Jun 2015 11:15:18 GMT</pubDate><content:encoded>&lt;p&gt;In the last six weeks we have had a lot of discussion with our user community around product packaging and pricing, primarily within the context of our crowdfunding campaign, where we tried to pre-sell the upcoming Personal and Pro editions of Whiteout Mailbox. &lt;/p&gt;

&lt;p&gt;The overwhelming feedback that we received during the campaign showed that there is strong interest in a free product version for Whiteout Mailbox. Users expect to be given a useful version of a product for free in exchange for their commitment to using the product and for referring others to it. &lt;/p&gt;

&lt;p&gt;So today we are happy to announce that &lt;strong&gt;we are offering Whiteout Mailbox Personal Edition with 2GB storage for free&lt;/strong&gt;, starting today. The product is still in beta, but you can &lt;a href="https://whiteout.io/#pricing"&gt;sign up&lt;/a&gt; today, no invite code needed. And tell your friends!&lt;/p&gt;

&lt;p&gt;The Pro version is under development and will be available later this year. The Whiteout Mail client for use with your existing mailbox is of course also available for free. &lt;/p&gt;

&lt;p&gt;Many thanks again to everybody for your valuable input.&lt;/p&gt;</content:encoded></item><item><title>Whiteout Mail 1.0 and Security Audit by Cure53</title><description>&lt;p&gt;As we started closing in on version 1.0, there was one more item on the roadmap: A security audit by a reputable source. A trusted partner since we started Whiteout Networks, Cure53 from Berlin was the obvious choice. &lt;/p&gt;

&lt;p&gt;Cure53 has profound knowledge of web security, giving both high-level conceptual&lt;/p&gt;</description><link>http://blog.whiteout.io/2015/06/11/whiteout-mail-1-0-and-security-audit-by-cure53/</link><guid isPermaLink="false">4a03ab0f-3680-4961-8138-67babb5029f7</guid><category>Security</category><category>Product</category><dc:creator>Felix Hammerl</dc:creator><pubDate>Thu, 11 Jun 2015 15:21:38 GMT</pubDate><content:encoded>&lt;p&gt;As we started closing in on version 1.0, there was one more item on the roadmap: A security audit by a reputable source. A trusted partner since we started Whiteout Networks, Cure53 from Berlin was the obvious choice. &lt;/p&gt;

&lt;p&gt;Cure53 has profound knowledge of web security, giving both high-level conceptual advice, as well as well-crafted proof-of-concept-attacks. This has helped to uncover and fix issues that would have never surfaced otherwise.&lt;/p&gt;

&lt;p&gt;We’d like to thank them for the fruitful collaboration and their uncompromising stance on security! It was fun to track down the issues and fix them, and we’re proud to say that this ongoing process has helped Whiteout Mail become better in many ways.&lt;/p&gt;

&lt;p&gt;Usability is very dear to us, as good usability directly translates into security. During the audit, Whiteout Mail was not only subjected to attacks, but also inspected for ambiguous messaging for the less tech-savvy user of email encryption. &lt;/p&gt;

&lt;p&gt;All of the the high-severity vulnerabilities have been discussed and fixed/mitigated, as well as many of the medium to low severity vulnerabilities. We will continue working on the open issues in the coming weeks.&lt;/p&gt;

&lt;p&gt;Here is an excerpt from the report’s conclusion:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Cure53 has followed the Whiteout team over the years, providing thorough security advice and in-depth audit. Keep in mind that the first tests and discussion started in late 2013 and continued fruitfully until this day. Cure53 is therefore in a position to have watched the software grow into the current shape of the long-anticipated version 1.0. In the current state of development, Whiteout has mastered mitigation of a large range of security issues. It has matured to a level, where an attacker can only (if at all) revert to social engineering attacks in hopes of meeting his or her goals. Only minor issues remain capable of causing limited damage to the user-base and their encrypted communications.&lt;/p&gt;
  
  &lt;p&gt;Providing a secure yet usable mail encryption software is not an easy task and requires consideration of a multitude of attacks, as well as a well-balanced security defense deployed across many levels. It begins on the lower layers of mail reception, mail body parsing and key management, and then moves all the way to the high up handling of the application stack, where a safe, secure and comprehensible UI is required to ensure that the user makes the right decisions. Over the mentioned time period a close collaboration of the Whiteout team with Cure53 was marked by several code audits, concept reviews, discussions and design considerations. Eventually, the software in scope reached the necessary level of maturity, allowing for it to be labeled a 1.0 version without false pretense or an overly quick jump to the first stable major release.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Please follow this link to full the report: &lt;a href="https://cure53.de/pentest-report_whiteout.pdf"&gt;https://cure53.de/pentest-report_whiteout.pdf&lt;/a&gt;&lt;/p&gt;</content:encoded></item><item><title>Facebook and PGP. A Pleasant Surprise.</title><description>&lt;p&gt;&lt;a href="https://www.facebook.com/notes/protect-the-graph/securing-email-communications-from-facebook/1611941762379302"&gt;This&lt;/a&gt; is a welcome surprise. &lt;/p&gt;

&lt;p&gt;Facebook announced the ability for users to upload their public key so that they can receive their messages from Facebook in encrypted form. &lt;/p&gt;

&lt;p&gt;&lt;img src="http://blog.whiteout.io/content/images/2015/06/Bildschirmfoto-2015-06-01-um-16-36-04.png" alt=""&gt;&lt;/p&gt;

&lt;p&gt;This is remarkable in several ways:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;It clearly demonstrates that &lt;strong&gt;PGP is the right way to go about encrypting email&lt;/strong&gt;. Email is&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;</description><link>http://blog.whiteout.io/2015/06/02/facebook-and-pgp-a-pleasant-surprise/</link><guid isPermaLink="false">5b20973b-49f9-4bef-b121-2bb5b8398c37</guid><dc:creator>Oliver Gajek</dc:creator><pubDate>Tue, 02 Jun 2015 06:48:45 GMT</pubDate><content:encoded>&lt;p&gt;&lt;a href="https://www.facebook.com/notes/protect-the-graph/securing-email-communications-from-facebook/1611941762379302"&gt;This&lt;/a&gt; is a welcome surprise. &lt;/p&gt;

&lt;p&gt;Facebook announced the ability for users to upload their public key so that they can receive their messages from Facebook in encrypted form. &lt;/p&gt;

&lt;p&gt;&lt;img src="http://blog.whiteout.io/content/images/2015/06/Bildschirmfoto-2015-06-01-um-16-36-04.png" alt=""&gt;&lt;/p&gt;

&lt;p&gt;This is remarkable in several ways:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;It clearly demonstrates that &lt;strong&gt;PGP is the right way to go about encrypting email&lt;/strong&gt;. Email is so prevalent precisely because it is the one message format where I don’t have to worry about what client or server you use. As long as I have your address I can communicate with you. The same goes for encryption. I want to be able to send encrypted messages to you without having to worry about which client or crypto tools you use. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Notifications from FB are now encrypted. That may or may not be important in real life. Many people would argue that sensitive information doesn’t belong on FB in the first place. But we can hopefully agree that &lt;strong&gt;putting more encrypted content onto the wire is a good thing in itself&lt;/strong&gt;, more security, less surveillance.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;More importantly, &lt;strong&gt;password reset emails are now encrypted&lt;/strong&gt;. This is huge. A hacker who hijacks your email account by cracking your password is easily able to reset all your passwords and destroy your online identity. With encrypted password reset messages that isn’t possible anymore. Well done!&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The most important implication to the more widespread adoption of encryption is the potential to &lt;strong&gt;use FB as a database for acquiring people’s public keys&lt;/strong&gt;. If I know your FB name I can look for your public key at &lt;a href="https://www.facebook.com/yourfacebookname/publickey/download"&gt;https://www.facebook.com/yourfacebookname/publickey/download&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;So secure email products such as &lt;a href="https://whiteout.io/"&gt;Whiteout Mail&lt;/a&gt; could add FB as another keyserver to query when acquiring keys (more on that &lt;a href="https://blog.whiteout.io/2015/02/06/making-pgp-key-management-invisible-so-johnny-can-encrypt/"&gt;here&lt;/a&gt;).&lt;/p&gt;</content:encoded></item><item><title>Cross-platform with Chrome Apps - a Developer Diary</title><description>&lt;p&gt;When we started &lt;a href="https://whiteout.io"&gt;whiteout.io&lt;/a&gt; in 2013, our goal was to provide end-to-end encrypted email that is easy to use and that runs on all devices. We had a lot of technical discussions on which platform to use for development, but in the end decided to make a bet on&lt;/p&gt;</description><link>http://blog.whiteout.io/2015/05/09/cross-platform-with-chrome-apps-a-developer-diary/</link><guid isPermaLink="false">84bc1b72-6de1-4038-8c30-e1e3fb8f4003</guid><category>Product</category><dc:creator>Tankred Hase</dc:creator><pubDate>Sat, 09 May 2015 15:25:56 GMT</pubDate><content:encoded>&lt;p&gt;When we started &lt;a href="https://whiteout.io"&gt;whiteout.io&lt;/a&gt; in 2013, our goal was to provide end-to-end encrypted email that is easy to use and that runs on all devices. We had a lot of technical discussions on which platform to use for development, but in the end decided to make a bet on the web and also its rate of progression as a foundation for cross-platform app development. This is what the app looks like today:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://blog.whiteout.io/content/images/2015/05/placeit_2.png" alt="Whiteout Mail Screenshots"&gt;&lt;/p&gt;

&lt;p&gt;This decision was not obvious at the time given the recent developments from &lt;a href="http://www.theverge.com/2012/8/23/3262782/facebook-for-ios-native-app"&gt;Facebook&lt;/a&gt; and &lt;a href="http://venturebeat.com/2013/04/17/linkedin-mobile-web-breakup/"&gt;LinkedIn&lt;/a&gt; shifting away from HTML5 to a native apps strategy. And for good reason. &lt;a href="http://techcrunch.com/2014/04/01/mobile-app-usage-increases-in-2014-as-mobile-web-surfing-declines/"&gt;Recent data shows&lt;/a&gt; that mobile users are spending more time in apps than on the mobile web. Since many apps are written with web technology it's not clear if this is because of native vs. web. But it’s safe to assume one aspect is that native user interfaces are often perceived as faster and more fluid than their HTML5 counterparts.&lt;/p&gt;

&lt;p&gt;This does not mean that fast and fluid user experiences cannot be built using web technology. In fact after Facebook announced its shift to native, Sencha released a proof of concept called &lt;a href="http://www.sencha.com/blog/the-making-of-fastbook-an-html5-love-story"&gt;fastbook&lt;/a&gt;, which showed that it is indeed possible to build native like app experiences using nothing but web technology. It was clear that it was cheaper and easier to build a great experience for a single platform using native. But since we wanted Whiteout Mail to run everywhere, we needed a more scalable approach.&lt;/p&gt;

&lt;h2 id="thebet"&gt;The bet&lt;/h2&gt;

&lt;p&gt;Inspired by fastbook and some other apps and ui frameworks that we had been testing internally for our first proof of concept implementation of Whiteout Mail, we decided to make a bet on HTML5. This bet was based on the following hypotheses:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Evergreen browsers such as Chrome and Firefox are increasing the rate of innovation on the web and these would inevitably lead to evergreen WebViews that are used as runtimes in frameworks such as Cordova.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Platform and hardware capabilities, that were traditionally only exposed as native apis via Objective C on iOS or Java on Android, would surface as standardized apis for JavaScript.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Development tools and frameworks would improve to the point where you would press only a button and out comes your app for: Windows, Mac, Linux, iOS, Android.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;This is why we are excited about Firefox OS. We don't believe it will compete with Android in terms of marketshare anytime soon, but Mozilla has always put pressure on other Browser/OS vendors like Google by spearheading standardization. &lt;/p&gt;

&lt;h2 id="fastforwardtotoday"&gt;Fast forward to today&lt;/h2&gt;

&lt;p&gt;We aren't quite there yet, but having spent the last year developing for the Chrome Apps platform, I think we're pretty damn close.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Android 4.4 was released with the Chromium WebView and Android 5.0 now has an &lt;a href="http://developer.android.com/about/versions/lollipop.html#WebView"&gt;autoupdating evergreen WebView&lt;/a&gt;. To bridge the gap to older devices and OS versions, developers can use the &lt;a href="https://crosswalk-project.org/"&gt;CrossWalk WebView&lt;/a&gt; to deploy an up-to-date runtime to Android 4.0+ (basically &lt;a href="https://developer.android.com/about/dashboards/index.html"&gt;over 90%&lt;/a&gt; of the current Android installed base).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Apple has released a very fast WebView for iOS 8. There are still some warts and I won’t go into all the details here. But you can read about the new WKWebView in &lt;a href="http://www.sencha.com/blog/apple-shows-love-for-html5-with-ios-8"&gt;Sencha’s post&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Many apis like &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/TCPSocket"&gt;raw TCP sockets&lt;/a&gt; that are required for implementing email protocols like IMAP/SMTP aren’t standardized yet. But there are proprietary apis to fill the gap e.g. &lt;a href="https://developer.chrome.com/apps/sockets_tcp"&gt;chrome.sockets&lt;/a&gt; and &lt;a href="http://msdn.microsoft.com/en-us/library/windows/apps/windows.networking.sockets.streamsocket.aspx"&gt;StreamSocket&lt;/a&gt;. They can be shimmed easily to work like the emerging standard api using our &lt;a href="https://github.com/whiteout-io/tcp-socket"&gt;tcp-socket shim&lt;/a&gt;. This allowed us to develop &lt;a href="http://emailjs.org"&gt;email.js&lt;/a&gt;, a toolbox for writing cross-platform email applications in pure JavaScript.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id="whatarechromeapps"&gt;What are Chrome Apps?&lt;/h2&gt;

&lt;p&gt;For anyone who is new to Chrome Apps here are two resources to get started.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;The official documentation: &lt;a href="https://developer.chrome.com/apps/about_apps"&gt;https://developer.chrome.com/apps/about_apps&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;A great introduction video: &lt;a href="http://youtu.be/f3NctLbtsNE"&gt;http://youtu.be/f3NctLbtsNE&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id="whywechosechromeapps"&gt;Why we chose Chrome Apps&lt;/h2&gt;

&lt;p&gt;The main reasons for us to use chrome apps are:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1. Security:&lt;/strong&gt; Since Whiteout Mail stores the user's private PGP key locally there are a lot of advantages to Chrome Apps when compared to the normal drive by web. I've written about threat modeling for browser crypto in detail &lt;a href="http://tankredhase.com/2014/04/13/heartbleed-and-javascript-crypto/"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. Distribution:&lt;/strong&gt; Most users go to their platform’s native app store to discover new apps. Chrome Apps support packaging for all relevant platforms (Android, iOS, Windows, Mac OS, Linux).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3. Offline:&lt;/strong&gt; Email clients need to work when users are offline. Users want to read and write messages on a train or a flight. The client should sync whenever there’s a connection but also work when there isn’t one.&lt;/p&gt;

&lt;h2 id="ourexperiencewithchromeapps"&gt;Our Experience with Chrome Apps&lt;/h2&gt;

&lt;p&gt;Building a complete email client in JavaScript with full IMAP / SMTP / MIME / OpenPGP support wasn’t an easy task, but the Chrome Apps platform provided a good foundation for this journey. Here is a brief overview of our experience developing Whiteout Mail.&lt;/p&gt;

&lt;h3 id="thedesktop"&gt;The desktop&lt;/h3&gt;

&lt;p&gt;&lt;img src="http://blog.whiteout.io/content/images/2015/05/placeit_3.jpg" alt="Screenshot of Whiteout Mail for the desktop"&gt;&lt;/p&gt;

&lt;p&gt;We started on the desktop since that was the first platform Chrome Apps were officially supported. This has turned out to be a good place to start. Chrome Apps are currently the most stable deployment path for cross-platform HTML5 packaged apps. We tried &lt;a href="https://developer.mozilla.org/en-US/Marketplace/Options/Packaged_apps"&gt;Firefox Packaged Apps&lt;/a&gt; but couldn't even &lt;a href="http://stackoverflow.com/questions/24339502/how-to-test-privileged-packaged-apps-on-firefox-for-desktop"&gt;debug them&lt;/a&gt; for the desktop.&lt;/p&gt;

&lt;p&gt;One thing to keep in mind is that Chrome Apps have several more constraints than regular web apps like &lt;a href="https://developer.chrome.com/apps/contentSecurityPolicy"&gt;Content Security Policy (CSP)&lt;/a&gt;. You may need to sandbox certain content into iframes and using apis like eval and inline scripts is not allowed. This is one reason we decided to use angular.js as it &lt;a href="https://docs.angularjs.org/api/ng/directive/ngCsp"&gt;supports CSP&lt;/a&gt; out of the box. One valuable experience we had here is that starting from a constrained architecture is always easier than the other way around. So it's best to start using CSP early if you intend to support Chrome Apps.&lt;/p&gt;

&lt;p&gt;You can try our desktop app &lt;a href="https://chrome.google.com/webstore/detail/whiteout-mail/jjgghafhamholjigjoghcfcekhkonijg"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id="android"&gt;Android&lt;/h3&gt;

&lt;p&gt;&lt;img src="http://blog.whiteout.io/content/images/2015/05/placeit_1.jpg" alt=""&gt;&lt;/p&gt;

&lt;p&gt;Next we ported the app to Android using the &lt;a href="https://github.com/MobileChromeApps/mobile-chrome-apps/blob/master/README.md"&gt;Chrome Cordova Apps&lt;/a&gt;. This turned out to be a surprisingly simple task due to the above mentioned Crosswalk WebView. The main challenge here was getting the back button for Android to work correctly. To be fair this was mainly because we forgot to handle the browser history at first in angular. Had we done this right from the beginning, the back button would have worked out of the box.&lt;/p&gt;

&lt;p&gt;You can try the Android app &lt;a href="https://play.google.com/store/apps/details?id=io.whiteout.WhiteoutMail"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id="ios"&gt;iOS&lt;/h3&gt;

&lt;p&gt;Finally we went on to tackle iOS. This turned out to be the hardest of the platforms due to some issues with the Chrome Api plugins. Thankfully &lt;a href="https://github.com/orgs/MobileChromeApps/people"&gt;the team&lt;/a&gt; behind Mobile Chrome Apps was very helpful and supportive. Anytime we had an issue, we received a response promptly on GitHub. Bugfixes also landed quickly in upcoming versions of &lt;em&gt;cca&lt;/em&gt; (Chrome Cordova Apps’ command line tool).&lt;/p&gt;

&lt;p&gt;You can try our iOS app &lt;a href="https://itunes.apple.com/us/app/whiteout-mail/id934872032"&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;h3 id="theweb"&gt;The Web&lt;/h3&gt;

&lt;p&gt;We were even able to get a full version of the app running on the web using the same code-base as for the Chrome Apps. We did this by extending our tcp-socket shim to use &lt;a href="http://socket.io"&gt;socket.io&lt;/a&gt; (to proxy TCP connections required for IMAP and SMTP) and &lt;a href="https://github.com/digitalbazaar/forge"&gt;Forge&lt;/a&gt; (a JavaScript implementation of TLS). This way we were able to terminate the TLS session on the user’s machine so that our proxy does not see any plaintext user data like passwords or email message content.&lt;/p&gt;

&lt;p&gt;You can try the webmail version of Whiteout Mail &lt;a href="https://mail.whiteout.io"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id="thecode"&gt;The code&lt;/h3&gt;

&lt;p&gt;In case you’re interested you can check out all of the &lt;a href="https://github.com/whiteout-io/mail-html5"&gt;code on GitHub&lt;/a&gt; since the Whiteout Mail client is &lt;a href="https://blog.whiteout.io/2014/10/17/webmail-and-open-source/"&gt;open source&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id="summary"&gt;Summary&lt;/h2&gt;

&lt;p&gt;The Chrome Apps platform is pretty close to the &lt;em&gt;write once run anywhere&lt;/em&gt; dream developers aspire to. The main advantage to using something like Chrome Apps or Cordova is that you can deploy your web app using each platform's native app store, since this is where most users go to discover new content and apps.&lt;/p&gt;

&lt;p&gt;There are of course still some caveats e.g. missing standardization of certain apis and packaging formats, but time will fix all of these issues. Standardization always trails innovation and without pioneers like Chrome Apps we would have to iterate on these concepts within the standards bodies, which is in nobody’s best interest.&lt;/p&gt;

&lt;p&gt;To get a feeling for where all this is heading here’s a &lt;a href="https://divshot.com/blog/opinion/the-future-of-the-web-according-to-google/"&gt;great summary&lt;/a&gt; of the 2014 Chrome Developer Summit. It seems like Google will be focusing less on proprietary apis in Chrome Apps and more on bringing all of this goodness to the open web. They intend to keep supporting Chrome Apps since it’s the native development platform for Chromebooks but it's clear where the focus will be.&lt;/p&gt;

&lt;p&gt;What does all of this mean for developers? In short I would definitely recommend developing for Chrome Apps. Even if Google decided to deprecate Chrome Apps tomorrow, you could still reuse 99% of your code on the open web (as we have with the Webmail version of Whiteout Mail). So there’s not a lot of risk for vendor lock-in. All in all Chrome Apps have become a very robust development environment and tooling like remote debugging in Chrome has matured to a point that the web now has a productive development workflow.&lt;/p&gt;</content:encoded></item><item><title>Whiteout Mail Available For iOS.</title><description>&lt;p&gt;Today we have some exciting news to share: The Whiteout Mail client now available for iOS. So you can send and receive encrypted email on all your devices.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The First Integrated PGP-client for iOS&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In fact Whiteout Mail is the first wholly-integrated PGP-client for iOS, where a single app lets&lt;/p&gt;</description><link>http://blog.whiteout.io/2015/05/07/whiteout-mail-client-available-for-ios/</link><guid isPermaLink="false">42e2b28a-5cc9-4d0b-a98e-a97267106685</guid><category>Product</category><dc:creator>Oliver Gajek</dc:creator><pubDate>Thu, 07 May 2015 14:26:45 GMT</pubDate><content:encoded>&lt;p&gt;Today we have some exciting news to share: The Whiteout Mail client now available for iOS. So you can send and receive encrypted email on all your devices.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The First Integrated PGP-client for iOS&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In fact Whiteout Mail is the first wholly-integrated PGP-client for iOS, where a single app lets users read and write encrypted emails and communicate with other PGP users. And with full IMAP support it connects to any existing mailbox.&lt;/p&gt;

&lt;p&gt;The application has a fully responsive design, runs on every size display and adapts to the available screen real estate, with optimized layouts for smartphone and tablet form factors.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://blog.whiteout.io/content/images/2015/05/unnamed.png" alt="alt"&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Secure Key Synchronization Across All Devices&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;With Whiteout’s secure key synchronization users can send and receive PGP-encrypted messages on all their devices, desktop, tablet smartphone, iOS, Android, even Chromebooks. And with automatic recipient key lookup, encrypting and signing your email is completely painless.&lt;/p&gt;

&lt;p&gt;A big thank you to the large number of beta testers who braved the Testflight installation procedure and gave us a lot of important feedback.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://itunes.apple.com/us/app/whiteout-mail/id934872032"&gt;Click here to install Whiteout Mail for iOS from the iTunes App Store.&lt;/a&gt;&lt;/p&gt;</content:encoded></item><item><title>Secure PGP Key Sync - A Proposal (cont’d)</title><description>&lt;p&gt;This post is a continuation of a &lt;a href="https://blog.whiteout.io/2014/07/07/secure-pgp-key-sync-a-proposal/"&gt;previous post on encrypted sync of a user’s private PGP key&lt;/a&gt;. In the previous post we discussed that in today’s multi screen world it is mandatory to be able to read and write encrypted messages on several devices at once. In&lt;/p&gt;</description><link>http://blog.whiteout.io/2015/04/08/secure-pgp-key-sync-a-proposal-contd/</link><guid isPermaLink="false">8b716b15-f708-4dc1-b6c1-2bf78fa2f7b0</guid><category>Security</category><category>Product</category><dc:creator>Tankred Hase</dc:creator><pubDate>Wed, 08 Apr 2015 12:12:25 GMT</pubDate><content:encoded>&lt;p&gt;This post is a continuation of a &lt;a href="https://blog.whiteout.io/2014/07/07/secure-pgp-key-sync-a-proposal/"&gt;previous post on encrypted sync of a user’s private PGP key&lt;/a&gt;. In the previous post we discussed that in today’s multi screen world it is mandatory to be able to read and write encrypted messages on several devices at once. In this context we proposed a specification for encrypted key synchronization. This post will once again highlight this topic by introducing a new simplified version of the specification.&lt;/p&gt;

&lt;h2 id="specificationupdateanrfc"&gt;Specification Update - an RFC&lt;/h2&gt;

&lt;p&gt;The new spec is published in our GitHub wiki and our intent is to publish this as an RFC for standardization, as other OpenPGP user agents such as Enigmail have expressed interest:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/whiteout-io/mail-html5/wiki/Secure-OpenPGP-Key-Pair-Synchronization-via-IMAP"&gt;Secure OpenPGP Key Pair Synchronization via IMAP (RFC)&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In a nutshell, the new spec is much simpler than our initial proposal. The encrypted private key is no longer stored on our server, but rather just stored in the user’s IMAP server. This not only removes the need to add a proprietary authentication mechanism, since IMAP servers already provide password (as well as 2-factor) based authentication, it also reduces the complexity of the overall protocol. This reduces the attack surface since a simpler protocol is easier to reason about, audit, and implement correctly.&lt;/p&gt;

&lt;h2 id="userexperience"&gt;User Experience&lt;/h2&gt;

&lt;p&gt;The user experience has also been simplified. The user no longer needs to be logged into another mail client to receive the recovery token required for authentication. The user simply needs to have an active IMAP session open, which is the case anyway for Whiteout Mail.&lt;/p&gt;

&lt;h3 id="upload"&gt;Upload&lt;/h3&gt;

&lt;p&gt;Key sync is now mandatory and the first time a user sets up Whiteout Mail they are prompted to write down a backup code.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://blog.whiteout.io/content/images/2015/04/upload-1.png" alt="Write down backup code"&gt;&lt;/p&gt;

&lt;p&gt;They are then prompted to confirm the backup code.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://blog.whiteout.io/content/images/2015/04/upload-2.png" alt="Confirm backup code"&gt;&lt;/p&gt;

&lt;p&gt;Now the user’s key pair is backed up in case they lose their device or in case they want to sync to a new device.&lt;/p&gt;

&lt;h3 id="download"&gt;Download&lt;/h3&gt;

&lt;p&gt;To add a new device, the user simply logs into Whiteout Mail with their email address. The app will automatically detect a synced key and will prompt the user to enter the backup code.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://blog.whiteout.io/content/images/2015/04/download.png" alt="Enter backup code"&gt;&lt;/p&gt;

&lt;p&gt;And done! It’s that easy.&lt;/p&gt;

&lt;h2 id="tryitnow"&gt;Try it now&lt;/h2&gt;

&lt;p&gt;To try out the new key sync, just head on over to our &lt;a href="https://whiteout.io/#product"&gt;download page&lt;/a&gt; and install the app for your platform.&lt;/p&gt;

&lt;h2 id="acknowledgements"&gt;Acknowledgements&lt;/h2&gt;

&lt;p&gt;We want to thank &lt;a href="https://cure53.de"&gt;Cure53&lt;/a&gt; who have worked together with us to design and review the security of the new protocol.&lt;/p&gt;</content:encoded></item><item><title>PGP: There’s Life In The Old Dog Yet.</title><description>&lt;p&gt;Email is the most sensitive and private form of electronic communication. Better protect it from prying eyes. By applying strong encryption. That we can agree on. The good news: The PGP standard for email encryption has been around for what feels like forever. It is not without problems, though, as&lt;/p&gt;</description><link>http://blog.whiteout.io/2015/02/25/pgp-theres-life-in-the-old-dog-yet/</link><guid isPermaLink="false">998795ab-86ba-4cbb-bf65-c5b20ee068f6</guid><dc:creator>Oliver Gajek</dc:creator><pubDate>Wed, 25 Feb 2015 12:56:40 GMT</pubDate><content:encoded>&lt;p&gt;Email is the most sensitive and private form of electronic communication. Better protect it from prying eyes. By applying strong encryption. That we can agree on. The good news: The PGP standard for email encryption has been around for what feels like forever. It is not without problems, though, as Matthew Green’s &lt;a href="http://blog.cryptographyengineering.com/2014/08/whats-matter-with-pgp.html"&gt;detailed analysis&lt;/a&gt; points out. &lt;/p&gt;

&lt;p&gt;Now noted cryptographer Moxie Marlinspike has joined the discussion with a rather &lt;a href="http://www.thoughtcrime.org/blog/gpg-and-me/"&gt;pessimistic conclusion&lt;/a&gt;, yearning for the days when PGP will be gone from his life. &lt;/p&gt;

&lt;p&gt;Maybe that is going a bit too far. &lt;/p&gt;

&lt;p&gt;Let’s not forget what we have in PGP:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;It’s been around for a long time, so it’s cryptographically well understood. It is one of the very few crypto standards that we can &lt;a href="http://www.spiegel.de/international/germany/inside-the-nsa-s-war-on-internet-security-a-1010361.html"&gt;reasonably assume&lt;/a&gt; to be practically unbreakable.&lt;/li&gt;
&lt;li&gt;There are a variety of implementations and there is a small but vibrant and highly committed developer community.&lt;/li&gt;
&lt;li&gt;A small but active and committed user community.&lt;/li&gt;
&lt;li&gt;It works in a federated system such as email. Systems such as TextSecure and iMessage are centralized services for ephemeral communication that don’t work in a decentralized, per domain architecture. This is probably unacceptable for corporate use cases where hosting your own server and data-retention laws are must-have requirements. &lt;/li&gt;
&lt;li&gt;Unlike chat, email is offline, asynchronous by nature, and incredibly sticky. That brings completely different requirements for encryption, which the suggested alternatives like the TextSecure protocol don’t solve.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now let’s look at the problems that people point to. And, yes, these are real problems and also the reason why adoption is not more widespread:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Usability&lt;/strong&gt;. Especially the installation, where I need to integrate my email client with a PGP add-on and a crypto toolkit and where that takes me several hours with an uncertain outcome. Not for the faint of heart. Nor for corporate users without admin privileges.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Lack of mobile device support&lt;/strong&gt;. What good is email that doesn’t show up on all my devices. Of which the modern user typically uses more than three during the day.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Manual key management&lt;/strong&gt;. Where to story my keys. How not to lose them. How to acquire keys for other people. Yes that can be tricky and prone to error. Even Edward Snowden himself &lt;a href="https://firstlook.org/theintercept/2014/10/28/smuggling-snowden-secrets/"&gt;fell victim to that.&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Lack of forward secrecy&lt;/strong&gt;. If my private key is compromised tomorrow an attacker will be able to read all of my past messages.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Outdated crypto primitives&lt;/strong&gt;. Since the OpenPGP standard has grown over time, there are multiple cipher suites and packaging format that a client needs to support. This makes the protocol quite complex.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Lack of meta-data security&lt;/strong&gt;. Sender, recipient, date/time, and the subject are all transmitted in the clear.&lt;/p&gt;

&lt;p&gt;At least some of theses challenges can be addressed without reinventing the whole wheel.&lt;/p&gt;

&lt;p&gt;We are developing a &lt;strong&gt;consumer-grade, mobile-first email client&lt;/strong&gt; that has everything in one package. Easy to install, easy to use. And with no software to be installed on your PC and all traffic tunneled via HTTPS also ready to go for a corporate environment.&lt;/p&gt;

&lt;p&gt;We make the client available on &lt;strong&gt;all relevant platforms,&lt;/strong&gt; desktop, Chromebook, Android, iOS, Windows phone. &lt;/p&gt;

&lt;p&gt;And we offer an &lt;strong&gt;integrated key management&lt;/strong&gt; that makes the whole process invisible to Whiteout users while still supporting interoperability with existing PGP/GPG users. More &lt;a href="https://blog.whiteout.io/2015/02/06/making-pgp-key-management-invisible-so-johnny-can-encrypt/"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Take a look at Whiteout Mail here:  &lt;a href="https://whiteout.io/"&gt;https://whiteout.io/&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;It also seems that we’re not alone in our commitment to PGP. The &lt;a href="https://gnupg.org/index.html"&gt;recent strong reaction&lt;/a&gt; from the community and the industry to the reports that key developer Werner Koch was running out of money is encouraging.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How Do We See the Future?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In order for public key discovery to become transparent and somewhat reliable, there need to be a federated and reliable key infrastructure. Werner Koch made an interesting suggestion &lt;a href="http://rem.eifzilla.de/archives/2015/02/24/re-die-schlssel-falle"&gt;here&lt;/a&gt; to use the DNS system. That way mail providers could validate uploaded keys, which would give PGP client apps a reliable source of keys. &lt;a href="https://github.com/google/end-to-end/wiki/Key-Distribution"&gt;Other projects&lt;/a&gt; are working on making the key distribution itself more reliable than the unauthenticated write-only storage HKP servers are currently. Applications could hide public key discovery completely from users which would allow for a UX that is similar to iMessage or TextSecure without throwing the whole SMTP/MIME transport layer overboard (which is likely to stay with us for the next 10-20 years).&lt;/p&gt;

&lt;p&gt;And while we do agree that there needs to be a standard for email encryption that goes beyond PGP we believe it will be quite a while before we will have a robust alternative. Early efforts such as Dark Mail, TextSecure and others, may be important contributions, but it still feels like early days.&lt;/p&gt;

&lt;p&gt;In fact, when we consider the key requirements for email, among them decentralized deployment and administration and the ability to store old conversations and to access them from any device, the new standard may just turn out to be very similar to SMTP and PGP. &lt;/p&gt;</content:encoded></item><item><title>Making PGP Key Management Invisible So Johnny Can Encrypt</title><description>&lt;p&gt;We’ve written about usability for PGP email encryption before. In a recent post we’ve touched on the &lt;a href="https://blog.whiteout.io/2015/01/29/why-alice-has-a-problem-if-bob-cant-encrypt/"&gt;usability of crypto apps&lt;/a&gt; in general and published a specification for &lt;a href="https://blog.whiteout.io/2014/07/07/secure-pgp-key-sync-a-proposal/"&gt;multi-device sync&lt;/a&gt; of a user’s private key. &lt;/p&gt;

&lt;p&gt;This post will address one of the hardest problems in PGP, namely&lt;/p&gt;</description><link>http://blog.whiteout.io/2015/02/06/making-pgp-key-management-invisible-so-johnny-can-encrypt/</link><guid isPermaLink="false">ed72321f-4199-42d1-a348-3c9ef4124bd6</guid><category>UX</category><dc:creator>Tankred Hase</dc:creator><pubDate>Fri, 06 Feb 2015 18:19:11 GMT</pubDate><media:content url="http://blog.whiteout.io/content/images/2015/02/Bildschirmfoto-2015-02-06-um-19-28-22-1.png" medium="image"/><content:encoded>&lt;img src="http://blog.whiteout.io/content/images/2015/02/Bildschirmfoto-2015-02-06-um-19-28-22-1.png" alt="Making PGP Key Management Invisible So Johnny Can Encrypt"&gt;&lt;p&gt;We’ve written about usability for PGP email encryption before. In a recent post we’ve touched on the &lt;a href="https://blog.whiteout.io/2015/01/29/why-alice-has-a-problem-if-bob-cant-encrypt/"&gt;usability of crypto apps&lt;/a&gt; in general and published a specification for &lt;a href="https://blog.whiteout.io/2014/07/07/secure-pgp-key-sync-a-proposal/"&gt;multi-device sync&lt;/a&gt; of a user’s private key. &lt;/p&gt;

&lt;p&gt;This post will address one of the hardest problems in PGP, namely key discovery of a contact’s public key.&lt;/p&gt;

&lt;h2 id="uxvssecuritytradeoff"&gt;UX vs. Security Tradeoff&lt;/h2&gt;

&lt;p&gt;Much has been written about the usability of PGP. Recently Matthew Green wrote a &lt;a href="http://blog.cryptographyengineering.com/2014/08/whats-matter-with-pgp.html"&gt;great post&lt;/a&gt; titled &lt;em&gt;What's the matter with PGP?&lt;/em&gt;. The post talks a lot about technical aspects of the protocol, but also about what should be addressed in terms of usability for key management:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;A proper approach to key management.&lt;/strong&gt; This could be anything from centralized key management as in Apple's iMessage -- which would still be better than nothing -- to a decentralized (but still usable) approach like the one offered by Signal or OTR. Whatever the solution, in order to achieve mass deployment, keys need to be made much more manageable or else submerged from the user altogether.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I agree completely. It’s not the user’s fault that the protocol is so complicated and they shouldn’t be burdened with it. That’s why we’ve added automatic public key lookup for incoming and outgoing messages in our PGP mail client &lt;a href="https://whiteout.io/"&gt;Whiteout Mail&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;Here’s a look at how it works.&lt;/p&gt;

&lt;h2 id="howwhiteoutmailpublickeydiscoveryworks"&gt;How Whiteout Mail Public Key Discovery Works&lt;/h2&gt;

&lt;p&gt;Up until now, Whiteout Mail had it’s own closed key server under &lt;a href="https://keys.whiteout.io"&gt;keys.whiteout.io&lt;/a&gt;. We basically did what Matthew Green proposed. We created a centralized authority that would accept an uploaded public key only after validating a user’s email address (proving ownership of the key). Keys were fetched automatically while reading and writing in Whiteout Mail and messages were encrypted by default. This worked quite well, but only from Whiteout user to Whiteout user. If users wanted to write PGP messages to non-whiteout users, they would have to find the recipient’s public PGP key and manually import it as a file. This is not only tedious but also impossible on platforms like iOS, where apps don’t have access to the filesystem.&lt;/p&gt;

&lt;p&gt;So users asked for support of standard &lt;a href="http://en.wikipedia.org/wiki/Key_server_%28cryptographic%29"&gt;HKP key servers&lt;/a&gt; and there was a &lt;a href="https://github.com/whiteout-io/mail-html5/issues/236"&gt;discussion&lt;/a&gt; on how to best handle key import.&lt;/p&gt;

&lt;h3 id="automatichkplookupinwhiteoutmail"&gt;Automatic HKP Lookup in Whiteout Mail&lt;/h3&gt;

&lt;p&gt;We felt strongly that encryption should just work for average users and that most should never be exposed to key management in the first place. Here’s what we came up with:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;When a user composes a new message to a recipient’s email address, the client first queries the local keychain. This keychain includes cached keys imported from any source.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;If the recipient’s key is not found in the local key ring the client then queries our own key server. These keys have been validated by our key server to ensure recipient key ownership.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;If there is no key for the recipient on our key server, a list of well known HKP key servers (e.g. pgp.mit.edu) is queried. If a key is found, it is imported to the local key ring by a TOFU (trust on first use) principle.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;If a key is found, it will be used to encrypt the message. The user will also be notified in the UI by changing the color from red (insecure) to blue (secure).&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;"But what if an attacker uploads a fake public key to pgp.mit.edu and users don’t notice?"&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;For most users this is not an issue as the attacker would need access to the recipient’s mailbox to decrypt the message (which has been encrypted to the wrong key). It depends on the type of attacker of course. State level adversaries can intercept a message in transit. But this implies an active/targeted attack. If this is your threat model, you will want to verify the PGP key fingerprint over a second channel anyway. Most users on the other hand would be helped by protecting them against a passive adversary like dragnet surveillance.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;So why design our encryption solution for an edge case and ignore the common case which would lead to a more usable experience for the masses?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Even with TOFU key lookup, users can later always navigate to the contacts menu and verify a recipient’s key fingerprint if they need to. There is a trade off between security and usability here. But users get transparency when they need it and it's as painless as possible in most cases.&lt;/p&gt;

&lt;p&gt;In practice encrypting to the wrong key will most likely cause the recipient to reply with something like this:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;"Hey, can't read your message. Did you use my current key? Here you go... "&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This is the only case the user will need to be exposed to key management. For this case Whiteout Mail offers key import via copy/paste, file import, or manual HKP server lookup. Once the correct key is imported, all future conversations between those users will be encrypted correctly.&lt;/p&gt;

&lt;h3 id="tofutrustonfirstuseworks"&gt;TOFU (Trust On First Use) Works&lt;/h3&gt;

&lt;p&gt;Sysadmins use TOFU everyday when they login to a new host via ssh. This is what the workflow for most users feels like:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://blog.whiteout.io/content/images/2015/02/Bildschirmfoto-2015-02-07-um-18-17-08.png" alt="Making PGP Key Management Invisible So Johnny Can Encrypt"&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;ol&gt;
  &lt;li&gt;Type &lt;strong&gt;ssh username@hostname&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;Read a security warning with some random characters  &lt;/li&gt;
  &lt;li&gt;Type &lt;strong&gt;yes&lt;/strong&gt; ... because &lt;em&gt;"who checks that stuff anyway"&lt;/em&gt;&lt;/li&gt;
  &lt;/ol&gt;
&lt;/blockquote&gt;

&lt;p&gt;Do you always confirm the RSA fingerprint when ssh'ing into a new machine? If we are brutally honest with ourselves, this is how encryption systems are being used out there in the wild. But it's still more secure than using a plaintext connection over telnet.&lt;/p&gt;

&lt;h2 id="howweimplementedhkpsupportforwhiteoutmail"&gt;How We Implemented HKP Support for Whiteout Mail&lt;/h2&gt;

&lt;p&gt;Before integrating HKP support, we looked at current key server implementations and saw that it wasn’t possible to integrate them into our app, due to some missing features.&lt;/p&gt;

&lt;h3 id="missingfeaturesinhkptoday"&gt;Missing features in HKP today&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;No SSL support&lt;/li&gt;
&lt;li&gt;Bad availability/scalability&lt;/li&gt;
&lt;li&gt;No email address validation of uploaded keys&lt;/li&gt;
&lt;li&gt;No CORS support (&lt;a href="http://lists.gnupg.org/pipermail/gnupg-users/2014-April/049446.html"&gt;see here&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We couldn’t make cross origin requests to HKP servers from the web version of our app. So instead we decided to use our current key server as a proxy and query multiple HKP servers for maximum availability and performance. Here’s a quick summary of our current key server architecture:&lt;/p&gt;

&lt;h3 id="whiteoutpublickeyserver"&gt;Whiteout Public Key Server:&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Modern REST style api&lt;/li&gt;
&lt;li&gt;SSL only&lt;/li&gt;
&lt;li&gt;CORS support&lt;/li&gt;
&lt;li&gt;Email address validation of uploaded key&lt;/li&gt;
&lt;li&gt;Automatic lookup on multiple HKP servers (first request wins)&lt;/li&gt;
&lt;li&gt;Automatic upload of public keys to HKP servers (after validation on our server)&lt;/li&gt;
&lt;li&gt;Autoscaling application server&lt;/li&gt;
&lt;li&gt;MongoDB cluster&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id="restapi"&gt;REST API:&lt;/h3&gt;

&lt;p&gt;Host: &lt;strong&gt;&lt;a href="https://keys.whiteout.io"&gt;https://keys.whiteout.io&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;h4 id="fetchkeyget"&gt;Fetch key (GET)&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;By email (short hand)
&lt;strong&gt;/:emailAddress&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;By email (long)
&lt;strong&gt;/publickey/user/:emailAddress&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;By key ID
&lt;strong&gt;/publickey/key/:keyId&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id="uploadkeyput"&gt;Upload key (PUT)&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Upload new key
&lt;strong&gt;/publickey/user/:emailAddress/key/:keyId&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id="summary"&gt;Summary&lt;/h2&gt;

&lt;p&gt;Using this api any PGP user (even non-Whiteout users) can link their pgp key with &lt;strong&gt;&lt;a href="https://keys.whiteout.io/emailAddress"&gt;https://keys.whiteout.io/emailAddress&lt;/a&gt;&lt;/strong&gt;. And any pgp user will be able to send and receive encrypted messages with Whiteout users, since HKP support goes both ways.&lt;/p&gt;

&lt;p&gt;The main advantage to the approach is that encryption will just work. Technically savvy GPG users will be able to send and receive messages with average users like Johnny. Can't get your Johnny to use GPG? Just send him over to &lt;a href="https://mail.whiteout.io"&gt;mail.whiteout.io&lt;/a&gt; and leave your GPG setup untouched.&lt;/p&gt;

&lt;p&gt;We look forward to your feedback and ideas. Please don't hesitate to ring us up on &lt;a href="https://twitter.com/whiteoutio"&gt;twitter&lt;/a&gt; or via &lt;a href="mailto:info@whiteout.io"&gt;mail&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Happy encrypting!&lt;/p&gt;</content:encoded></item><item><title>Why Alice has a problem if Bob can't encrypt</title><description>&lt;p&gt;I listened to many good talks at the 31st Chaos Communication Congress in Hamburg (GER) last December. I was especially impressed by &lt;a href="http://media.ccc.de/browse/congress/2014/31c3_-_6154_-_en_-_saal_1_-_201412272300_-_crypto_tales_from_the_trenches_-_nadia_heninger_-_julia_angwin_-_laura_poitras_-_jack_gillum.html#video"&gt;"Crypto Tales from the Trenches"&lt;/a&gt; by Nadia Heninger, Julia Angwin, Laura Poitras, and Jack Gillum, and &lt;a href="http://media.ccc.de/browse/congress/2014/31c3_-_6258_-_en_-_saal_1_-_201412282030_-_reconstructing_narratives_-_jacob_-_laura_poitras.html#video"&gt;"Reconstructing narratives"&lt;/a&gt; by Jacob Appelbaum and Laura Poitras. That got me thinking&lt;/p&gt;</description><link>http://blog.whiteout.io/2015/01/29/why-alice-has-a-problem-if-bob-cant-encrypt/</link><guid isPermaLink="false">3a6fcebb-29f3-4eea-a9ee-b26861986bd5</guid><category>UX</category><dc:creator>Felix Hammerl</dc:creator><pubDate>Thu, 29 Jan 2015 09:43:15 GMT</pubDate><content:encoded>&lt;p&gt;I listened to many good talks at the 31st Chaos Communication Congress in Hamburg (GER) last December. I was especially impressed by &lt;a href="http://media.ccc.de/browse/congress/2014/31c3_-_6154_-_en_-_saal_1_-_201412272300_-_crypto_tales_from_the_trenches_-_nadia_heninger_-_julia_angwin_-_laura_poitras_-_jack_gillum.html#video"&gt;"Crypto Tales from the Trenches"&lt;/a&gt; by Nadia Heninger, Julia Angwin, Laura Poitras, and Jack Gillum, and &lt;a href="http://media.ccc.de/browse/congress/2014/31c3_-_6258_-_en_-_saal_1_-_201412282030_-_reconstructing_narratives_-_jacob_-_laura_poitras.html#video"&gt;"Reconstructing narratives"&lt;/a&gt; by Jacob Appelbaum and Laura Poitras. That got me thinking about the state of crypto in 2015 and the hard parts of developing a cryptosystem for the real world.&lt;/p&gt;

&lt;p&gt;This post sets out to explain the merits of cryptography ("The Good") and how to apply the lessons learned ("The Bad").&lt;/p&gt;

&lt;h1 id="thegood"&gt;The Good&lt;/h1&gt;

&lt;p&gt;More open-source initatives are working towards an encrypted future than ever before. This is a good thing! This shows a stronger level of interest and activity anyone would have expected prior to June 2013.&lt;/p&gt;

&lt;p&gt;A crypto-anarchist's dream is an ideal world where everybody would communicate in encrypted form. Computers of all shapes and sizes would communicate in a way that prevents eavesdropping and allows for tamperproof message exchange, in theory giving birth to a new kind of freedom unlike anything we haveseen before. The change is happening now, at that very moment, all around the globe, right under your nose! Jon Callas' talk &lt;a href="https://www.youtube.com/watch?v=VLTGyYU52VQ"&gt;"The Revolution Will Be Encrypted"&lt;/a&gt; sums this up very welly. If you apply cryptography to modern communication tools, the result can be marvellous:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Cryptography erases distance. You can whisper in someone's ear who is a world away, choose to associate with whom you want to associate. And nobody in between is the wiser.&lt;/li&gt;
&lt;li&gt;You can speak publicly. Everybody can make sure that the message relayed to them is unmodified.&lt;/li&gt;
&lt;li&gt;You can speak privately. You can choose to not be on the record. You can create a space where you can be stupid, or be wrong, or assume a different identity, or develop new ideas.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Those three basic human rights, enabled by applied mathematics, offer enormous potential for a free and open society.&lt;/p&gt;

&lt;p&gt;Investigative journalism is a good example here. Besides the legislative, executive and judicial branches of the government, journalism is an extra-governmental forcing function in the system of checks and balances. Investigative journalists have the power to rectify deficiencies. Their unique ability is to get insights in otherwise completely walled-off affairs. In order to do this, the ability to speak privately to your source is a life insurance. All too often in a very literal sense.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;But I have nothing to hide?!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So, what if you really had nothing to hide? Really? Suffice to say that there are numerous studies out there to show how much of a misconception it is to assume that no harm will come to you because you are not interesting. Surveillance is a form of behavioral control. Because you will change your behavior if you know that you are under surveillance. Those two sources sum this up quite nicely:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="http://tehlug.org/files/solove.pdf"&gt;"'I've got nothing to hide' and other misunderstandings of privacy" by Daniel Solove&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.ted.com/talks/glenn_greenwald_why_privacy_matters"&gt;"Why privacy matters" by Glenn Greenwald&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id="thebad"&gt;The Bad&lt;/h1&gt;

&lt;p&gt;Mass surveillance of electronic communication is a fact. We have had our suspicions for a long time, now we know for sure. Equally worrying are the reports about active corruption of cryptographic standards in order to promote weak or backdoored implementations. Only a small number of well-designed crypto protocols and their implementations in Open Source Software hold up under scrutiny. Among them is the &lt;strong&gt;PGP&lt;/strong&gt; standard for email encryption.&lt;/p&gt;

&lt;p&gt;So while tools for effective protection from mass surveillance exist, they are mostly very hard to use due to bad user experience (UX). Let's look at how an encrypted conversation between Alice and Bob might start:&lt;/p&gt;

&lt;p&gt;1) Alice has to invest time to seek out the appropriate tools. &lt;br&gt;
2) Alice has to invest time and money to learn to use those new tools. &lt;br&gt;
3) Alice has to invest time to convince her communication counterpart Bob to use those tools. &lt;br&gt;
4) Bob has to invest time and money to learn to use those tools, too.&lt;/p&gt;

&lt;p&gt;And they also have to invest time to deal with the overhead of encrypted communication, e.g. being restricted to certain devices.&lt;/p&gt;

&lt;p&gt;Let's have a more detailed look at step 2 in the following section "Make your stuff usable for Alice" and step 4 in the section "Make your stuff usable for Bob".&lt;/p&gt;

&lt;h2 id="makeyourstuffusableforalice"&gt;Make your stuff usable for Alice&lt;/h2&gt;

&lt;p&gt;Your level of protection can only be as good as the weakest link in the chain. The design of cryptosystems in itself is hard enough, especially when they are attacked by an infinitely powerful adversary. But all too often, the &lt;a href="http://www.cs.berkeley.edu/~tygar/papers/Why_Johnny_Cant_Encrypt/USENIX.pdf"&gt;weakest&lt;/a&gt; &lt;a href="http://www.chariotsfire.com/pub/sheng-poster_abstract.pdf"&gt;link&lt;/a&gt; &lt;a href="http://www.academia.edu/3042410/Crying_Wolf_An_Empirical_Study_of_SSL_Warning_Effectiveness"&gt;is the&lt;/a&gt; &lt;a href="http://www.cl.cam.ac.uk/users/rja14/Papers/wcf.pdf"&gt;user&lt;/a&gt;, even if the crypto is solid.&lt;/p&gt;

&lt;p&gt;In that case, the next best option is lowering the entry barrier. This is typically achieved by well-designed UI and UX. But how do you achieve a pleasant UX for crypto? The answer is painfully obvious: &lt;em&gt;Hide the crypto&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;During the past year of working on &lt;a href="https://mail.whiteout.io/"&gt;Whiteout Mail&lt;/a&gt;, I have come to understand that users don't want to be bothered with encryption. Cryptographic tools are typically designed by engineers. An engineer has a pretty good impression of what the program is supposed to do. They know what's happening behind the scenes. They want to be in control. They know about fingerprints and key lengths. They know the difference between a public key and a private key. They want to choose whether to send in PGP/MIME or PGP/INLINE, to encrypt and/or sign a message. They already know what to do. Now guess what would happen if someone took all that knowledge away and told them to use the very same tool again.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://blog.whiteout.io/content/images/2015/02/fa5.jpg" alt="I have no idea what I'm doing"&gt;&lt;/p&gt;

&lt;p&gt;All of a sudden, all the options are overwhelming. There's no way of knowing what it could possibly mean. If a user is unsure about what you want from them, two things will happen:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;They will assume that they will probably do something wrong.&lt;/li&gt;
&lt;li&gt;Out of fear of doing something wrong they will stop using your stuff altogether.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you look more closely, all of the complexity could have been substituted by safe defaults. &lt;a href="https://www.youtube.com/watch?v=is9luGFzqgA"&gt;In his SOUPS '14 keynote&lt;/a&gt; Christopher Soghoian explains why safe defaults are a really good idea when it comes to complexity. Why not use PGP/MIME by default? Why not generate 2k or 4k RSA keys by default? Why not hide signatures if they are valid and only show them if they are invalid? Or why not change use a nomenclature that explains what signatures actually represent, i.e. the message integrity? Most of those things reflect details of the underlying protocol. And the average user mostly does not care about that (and rightfully so).&lt;/p&gt;

&lt;p&gt;Show the details if something goes wrong? &lt;em&gt;Absolutely&lt;/em&gt;. Show that something goes wrong and give the user the ability to dig deeper with optional error information.&lt;/p&gt;

&lt;p&gt;Hide the details as long as everything is ok? &lt;em&gt;Absolutely&lt;/em&gt;. Leave the options to the pros, they'll know what to look for in the preferences.&lt;/p&gt;

&lt;p&gt;So now you've finally managed to create a usable cryptosystem, at least for the Alice you had in mind when you developed it. &lt;/p&gt;

&lt;p&gt;Now comes the hard part: Alice wants to put it to good use and communicate with Bob.&lt;/p&gt;

&lt;h2 id="makeyourstuffusableforbob"&gt;Make your stuff usable for Bob&lt;/h2&gt;

&lt;p&gt;This one is basically about empathy. While your users, i.e. Alice, have at least an idea that they want to use crypto, their communication partners, i.e. Bob, on the other hand are considerably harder to get on board. More likely than not Bob will not even know that he is using cryptography. Bob will be far less motivated to figure out the parts where you failed to guide him. Bob will not know what to do. Please listen to &lt;a href="https://media.ccc.de/browse/congress/2014/31c3_-_6154_-_en_-_saal_1_-_201412272300_-_crypto_tales_from_the_trenches_-_nadia_heninger_-_julia_angwin_-_laura_poitras_-_jack_gillum.html#video"&gt;what Poitras, Angwin et al. say about what happens when you make the Bobs of this world use crypto&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;When you lose Bob during the onboarding process, privacy gives way to convenience. Bob thinks he might as well send in plain text, because who would be interested in him anyway? What's the worst thing that might happen? Bob has no way of knowing that as soon as somebody pulls his communication logs, he is naked and his life is ripped wide open. Would you want the contents of your email account be open to everyone? Just ask &lt;a href="http://www.dailymail.co.uk/news/article-2382681/Colin-Powell-admits-sending-personal-emails-Romanian-diplomat-DENIES-having-affair-hacker-threatens-leak-intimate-messages.html"&gt;Colin Powell&lt;/a&gt;, &lt;a href="http://edition.cnn.com/2011/POLITICS/06/16/weiner.scandal/"&gt;Anthony Weiner&lt;/a&gt;, or &lt;a href="http://edition.cnn.com/2012/11/12/us/petraeus-cia-resignation/"&gt;David Petraeus&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;When you develop a cryptosystem, please have some empathy for Bob, i.e. the people on the other end of the line. Bob is the one that makes or breaks your cryptosystem!&lt;/strong&gt;&lt;/p&gt;</content:encoded></item><item><title>Banning Encryption? At Best Naive.</title><description>&lt;p&gt;We all stand in shock at the horrific attacks in Paris. Our thoughts go out to the families and everybody affected. And once again we are confronted with the fact that the open society has enemies and is vulnerable.&lt;/p&gt;

&lt;p&gt;So people are worried and are looking to their elected leaders&lt;/p&gt;</description><link>http://blog.whiteout.io/2015/01/15/banning-encryption-at-best-naive/</link><guid isPermaLink="false">14647af6-417f-46ba-8a43-7aeda66d397b</guid><dc:creator>Oliver Gajek</dc:creator><pubDate>Thu, 15 Jan 2015 16:00:10 GMT</pubDate><content:encoded>&lt;p&gt;We all stand in shock at the horrific attacks in Paris. Our thoughts go out to the families and everybody affected. And once again we are confronted with the fact that the open society has enemies and is vulnerable.&lt;/p&gt;

&lt;p&gt;So people are worried and are looking to their elected leaders for answers. These leaders would do well to provide the thoughtful and carefully reasoned answers that we should expect from them. And to not exploit the situation for populistic campaigning. &lt;/p&gt;

&lt;p&gt;A blatant example of the latter is the UK PM now &lt;a href="http://www.theguardian.com/uk-news/2015/jan/15/avid-ameron-ask-us-barack-obama-help-tracking-islamist-extremists-online?CMP=EMCNEWEML6619I2"&gt;calling for a ban on encryption&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;This line of argument is at best misleading. The underlying fallacies are:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;It cannot be done&lt;/strong&gt;: You don’t need an advanced degree in information technology to understand that this simply cannot be done. Cory Doctorow explains it well &lt;a href="http://boingboing.net/2015/01/13/what-david-cameron-just-propos.html"&gt;here&lt;/a&gt;. In a nutshell, the tools and technologies are out in the open and cannot be controlled by legislative means.
 &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;It also wouldn’t work&lt;/strong&gt;: Imagine for a second a world without encryption and the corresponding mass surveillance of everything that floats around the net. It is inconceivable how governments would now separate the signal from the noise and generate actionable insights. Also, when we look at the catastrophes of the recent past, among them New York, London, Madrid, and now Paris, most experts agree that the obvious breakdowns in intelligence and anti-terrorism that allowed these events to take place were not at all due to a lack of data. But to inter-agency process breakdown and a lack of feet on the street to do real-world, hands-on intelligence work. 
 &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;It would actually increase our risk&lt;/strong&gt;: If we did give up protection and allowed the government to monitor every communication, how would we prevent anybody else from exploiting the same backdoors and loopholes? Naturally spies, attackers, saboteurs would use precisely the same access. The risk would be higher than the reward. &lt;/p&gt;

&lt;p&gt;So the discussion started by David Cameron is at best naive.&lt;/p&gt;

&lt;p&gt;Or, if you’re more cynically inclined, precisely the kind of topic politicians will jump on: Complex to understand, ultimately destined for failure, but immensely productive when you want to own a topic that will not go away and you can keep coming up with deeply concerned soundbites. &lt;/p&gt;

&lt;p&gt;In any case it is a dangerous distraction. Protecting the open society from its enemies will require a different leadership. One where you strengthen the moral compass and respect the intelligence of your citizens rather than dumbing things down.&lt;/p&gt;

&lt;p&gt;Even if that means telling them things they may not want to hear. That we might need to pay for more police for more hands-on old-fashioned intelligence and protection footwork. &lt;/p&gt;

&lt;p&gt;An update: &lt;a href="http://www.theguardian.com/us-news/2015/jan/15/-sp-secret-us-cybersecurity-report-encryption-protect-data-cameron-paris-attacks"&gt;Now it turns out&lt;/a&gt; that we find the US intelligence agencies themselves urging more encryption to protect private data for citizens and businesses. And, just this week, the &lt;a href="http://t3n.de/news/bsi-praesident-gnupg-588708/"&gt;German government’s cyber security czar urged businesses&lt;/a&gt; to adopt more encryption to protect against espionage. Pointing specifically to PGP as the technology of choice. I agree. &lt;/p&gt;</content:encoded></item><item><title>New Responsive Design</title><description>&lt;p&gt;At Whiteout we not only want end-to-end encrypted email to be easy to use, but also powerful enough to address more and more of your email needs. That's why we've been working hard over the last few months to rebuild the Whiteout Mail experience from the ground up. Today we're&lt;/p&gt;</description><link>http://blog.whiteout.io/2014/12/08/new-responsive-design/</link><guid isPermaLink="false">77778b20-7b01-4ecf-9a61-74e83e3efe7c</guid><category>Product</category><dc:creator>Tankred Hase</dc:creator><pubDate>Mon, 08 Dec 2014 17:42:09 GMT</pubDate><content:encoded>&lt;p&gt;At Whiteout we not only want end-to-end encrypted email to be easy to use, but also powerful enough to address more and more of your email needs. That's why we've been working hard over the last few months to rebuild the Whiteout Mail experience from the ground up. Today we're excited to share what we've come up with.&lt;/p&gt;

&lt;h2 id="thenewdesktop"&gt;The New Desktop&lt;/h2&gt;

&lt;p&gt;&lt;img src="http://blog.whiteout.io/content/images/2015/02/placeit_3-3.jpg" alt="New Desktop Layout"&gt;&lt;/p&gt;

&lt;p&gt;The Whiteout Mail client is designed to run on all your devices, desktop, tablets, smartphones. We have now added an additional layout to our responsive design that is optimized for the larger screen you typically have on a desktop or laptop computer. You will recognize the familiar layout displaying all your folders in the lefthand pane from the desktop mail clients you normally use.&lt;/p&gt;

&lt;h2 id="completelyresponsive"&gt;Completely Responsive&lt;/h2&gt;

&lt;p&gt;&lt;img src="http://blog.whiteout.io/content/images/2015/02/placeit_2-4.png" alt="Responsive Design"&gt;&lt;/p&gt;

&lt;p&gt;If you resize the window it will automatically adopt the layouts for the tablet or the smartphone screen sizes. The new desktop layout is available both in the packaged app as well as in the webmail version of Whiteout Mail. To try it out just head over to &lt;a href="https://mail.whiteout.io"&gt;mail.whiteout.io&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id="standardsbasedandopensource"&gt;Standards based and Open Source&lt;/h2&gt;

&lt;p&gt;Even though the user interface changed, the core of our application remains the same. We are committed to building on established open standards such as OpenPGP, IMAP and SMTP. This means you can use the new client with your existing email account and write PGP messages to non-whiteout users.&lt;/p&gt;

&lt;p&gt;As always the source code is open. &lt;a href="https://github.com/whiteout-io/mail-html5"&gt;Check it out&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id="advancenoticewhiteoutmailboxprivatebeta"&gt;Advance Notice: Whiteout Mailbox Private Beta&lt;/h2&gt;

&lt;p&gt;We have been working on Whiteout Mailbox, a new email service that will be available as an additional secure mailbox for your confidential communication needs. Or as your new mailbox where you send and receive all your mail. Whiteout Mailbox is hosted in Germany and will offer important security benefits, especially at-rest encryption of your messages when they are stored in the cloud. Let us know if you want to take part in the upcoming private beta at &lt;a href="mailto:support@whiteout.io"&gt;support@whiteout.io&lt;/a&gt;.&lt;/p&gt;</content:encoded></item><item><title>Webmail &amp; Open Source</title><description>&lt;p&gt;&lt;img src="http://blog.whiteout.io/content/images/2015/02/Bildschirmfoto-2014-10-13-um-16-56-46-3.png" alt="Whiteout Mail is now available for the web!"&gt;&lt;/p&gt;

&lt;p&gt;We have big plans for Whiteout Mail and today we'd like to share a few more pieces of the puzzle: Placing the mail client under the MIT open source license to encourage community participation, announcing support for trusted web hosting, and a preview of the premium services that we are&lt;/p&gt;</description><link>http://blog.whiteout.io/2014/10/17/webmail-and-open-source/</link><guid isPermaLink="false">4785193d-55c6-46ff-9b4e-6190cd903388</guid><category>Product</category><dc:creator>Tankred Hase</dc:creator><pubDate>Fri, 17 Oct 2014 10:32:39 GMT</pubDate><content:encoded>&lt;p&gt;&lt;img src="http://blog.whiteout.io/content/images/2015/02/Bildschirmfoto-2014-10-13-um-16-56-46-3.png" alt="Whiteout Mail is now available for the web!"&gt;&lt;/p&gt;

&lt;p&gt;We have big plans for Whiteout Mail and today we'd like to share a few more pieces of the puzzle: Placing the mail client under the MIT open source license to encourage community participation, announcing support for trusted web hosting, and a preview of the premium services that we are working on.&lt;/p&gt;

&lt;h2 id="opensourcelicense"&gt;Open Source License&lt;/h2&gt;

&lt;p&gt;We are very excited to announce that starting today, the complete Whiteout Mail client will be put under the MIT open source license. Our client code has been &lt;a href="https://github.com/whiteout-io/mail-html5"&gt;open for inspection&lt;/a&gt; from day one, but the MIT license will allow us to build Whiteout Mail together with a very diverse open source community. We welcome non-profit contributors as well as commercial partners at every level of the stack. This is why we are very excited to see that Mozilla is using our &lt;a href="https://bugzilla.mozilla.org/show_bug.cgi?id=885110"&gt;email.js libraries in the Firefox OS 2.1 mail client&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;We hope Whiteout Mail will become for multi-device PGP and the Web what Thunderbird is for the desktop and we look forward to your contributions and ideas!&lt;/p&gt;

&lt;h2 id="trustedwebhosting"&gt;Trusted Webhosting&lt;/h2&gt;

&lt;p&gt;We understand that different users may have different threat models in mind when selecting a solution for encrypted email. This is why starting today we will support Whiteout for three levels of trust:&lt;/p&gt;

&lt;h3 id="1packagedappinstallation"&gt;1. Packaged App Installation&lt;/h3&gt;

&lt;p&gt;This is the default and most secure mode. We provide official builds for Chrome, Android and iOS (coming soon). There is no need to trust us when using these apps, as they are installed as signed apps from an App Store and the installed source code can be compared with our tagged releases on GitHub.&lt;/p&gt;

&lt;h3 id="2trustedwebhosting"&gt;2. Trusted Webhosting&lt;/h3&gt;

&lt;p&gt;Starting today, you will be able to download and install WM to your own trusted web server and use it in the browser. Use cases could include your company's server or setting up your own self-hosted solution.&lt;/p&gt;

&lt;p&gt;The cool thing is that the IMAP/SMTP logic is still implemented completely in js on the client. TCP traffic is proxied with the TLS session terminated in the user's browser using socket.io and js-crypto (&lt;a href="https://github.com/digitalbazaar/forge"&gt;forge&lt;/a&gt;). This means that the proxy on the webserver will see only encrypted traffic and never any user data like IMAP/SMTP passwords or message contents.&lt;/p&gt;

&lt;p&gt;Like the packaged app, user data such as your private PGP key, are persisted only on the client (in IndexedDB), and the app's code is even cached for offline use (using HTML5 AppCache). The Application can be installed to the device’s homescreen and is configured to notify the user when the AppCache is updated. This makes the user experience as transparent as possible and works similarly to updates via an App Store.&lt;/p&gt;

&lt;p&gt;Since users are getting the js crypto code from the web server, there will be a trust relationship to that server. But if this is your own trusted server this is ok. The web server enforces CSP (Content Security Policy) and HSTS (HTTP Strict Transport Security) to mitigate cross site scripting and man-in-the-middle attacks.&lt;/p&gt;

&lt;h3 id="3managedwebmail"&gt;3. Managed Webmail&lt;/h3&gt;

&lt;p&gt;The third mode of operation is managed hosting by us. Due to the TLS connection from the browser to the IMAP server, our proxy will never see any of your data. But you will be trusting the Whiteout webserver to deliver the correct code to your browser in this mode. The threat model for this approach is discussed &lt;a href="https://blog.whiteout.io/2014/04/13/heartbleed-and-javascript-crypto/"&gt;here&lt;/a&gt; and we will do our best to inform users in plain english about the security trade-off they are making.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note that this mode of operation does not protect users against active attacks from Whiteout Networks, e.g. should we receive a subpoena for a specific user. But it will protect users against passive attacks, like dragnet surveillance and wiretapping of government agencies.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;We think it's important that users are able to make an informed decision about how much convenience they want to give up for security. If you're a concerned citizen and don't want too much hassle to protect your email privacy, this might be the right mode for you. Just open your favorite web browser and navigate to  &lt;a href="https://mail.whiteout.io"&gt;mail.whiteout.io&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id="premiumservices"&gt;Premium Services&lt;/h2&gt;

&lt;p&gt;Although the WM client is completely free and open source, we will offer paid options for power users and companies in the near future.&lt;/p&gt;

&lt;h3 id="fullyencryptedwhiteoutmailbox"&gt;Fully encrypted Whiteout Mailbox&lt;/h3&gt;

&lt;p&gt;We will offer paid mailboxes under the wmail.io domain. This is a fully managed mailbox with extra privacy features built in.&lt;/p&gt;

&lt;p&gt;Upon uploading your public PGP key to our key-server, all incoming messages will be encrypted on the fly to your public key before being stored on our servers (hosted in Europe). Also: unlike free mail providers like Gmail, we will not log user data or scan your emails to show you advertising. With Whiteout you are the customer, not the product!&lt;/p&gt;

&lt;p&gt;Messages stored in wmail.io will only be accessible with the private PGP key, stored on your device. This will protect your messages at rest on the server against hackers and identity theft. You will even be able to use other mail clients with wmail.io (like Apple Mail together with GPGtools or Thunderbird with Enigmail).&lt;/p&gt;

&lt;p&gt;Remember: your email address is your identity on the internet and now you can protect it with an extra layer of security.&lt;/p&gt;

&lt;p&gt;Expect to hear more about how to sign up for early access to the Whiteout Mailbox private beta program.&lt;/p&gt;

&lt;h3 id="premiumservicesandvolumelicensing"&gt;Premium Services and Volume Licensing&lt;/h3&gt;

&lt;p&gt;Using the Whiteout Mail client is free. Users who want to get the best possible experience will be able to select a paid premium service, which includes automatic updates, secure key synchronization for multiple devices, as well as a support hotline. Organizations who are interested in deploying encrypted email across larger groups of users will benefit from our volume licensing program. Watch this space for further updates. &lt;/p&gt;

&lt;p&gt;Happy encrypting!&lt;/p&gt;</content:encoded></item></channel></rss>